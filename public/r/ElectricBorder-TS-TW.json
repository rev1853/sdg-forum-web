{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ElectricBorder-TS-TW",
  "type": "registry:block",
  "title": "ElectricBorder",
  "description": "Jittery electric energy border with animated arcs, glow and adjustable intensity.",
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Animations/ElectricBorder/ElectricBorder.tsx",
      "content": "import React, { CSSProperties, PropsWithChildren, useEffect, useId, useLayoutEffect, useRef } from 'react';\n\ntype ElectricBorderProps = PropsWithChildren<{\n  color?: string;\n  speed?: number;\n  chaos?: number;\n  thickness?: number;\n  className?: string;\n  style?: CSSProperties;\n}>;\n\nfunction hexToRgba(hex: string, alpha = 1): string {\n  if (!hex) return `rgba(0,0,0,${alpha})`;\n  let h = hex.replace('#', '');\n  if (h.length === 3) {\n    h = h\n      .split('')\n      .map(c => c + c)\n      .join('');\n  }\n  const int = parseInt(h, 16);\n  const r = (int >> 16) & 255;\n  const g = (int >> 8) & 255;\n  const b = int & 255;\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n}\n\nconst ElectricBorder: React.FC<ElectricBorderProps> = ({\n  children,\n  color = '#5227FF',\n  speed = 1,\n  chaos = 1,\n  thickness = 2,\n  className,\n  style\n}) => {\n  const rawId = useId().replace(/[:]/g, '');\n  const filterId = `turbulent-displace-${rawId}`;\n  const svgRef = useRef<SVGSVGElement | null>(null);\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const strokeRef = useRef<HTMLDivElement | null>(null);\n\n  const updateAnim = () => {\n    const svg = svgRef.current;\n    const host = rootRef.current;\n    if (!svg || !host) return;\n\n    if (strokeRef.current) {\n      strokeRef.current.style.filter = `url(#${filterId})`;\n    }\n\n    const width = Math.max(1, Math.round(host.clientWidth || host.getBoundingClientRect().width || 0));\n    const height = Math.max(1, Math.round(host.clientHeight || host.getBoundingClientRect().height || 0));\n\n    const dyAnims = Array.from(svg.querySelectorAll<SVGAnimateElement>('feOffset > animate[attributeName=\"dy\"]'));\n    if (dyAnims.length >= 2) {\n      dyAnims[0].setAttribute('values', `${height}; 0`);\n      dyAnims[1].setAttribute('values', `0; -${height}`);\n    }\n\n    const dxAnims = Array.from(svg.querySelectorAll<SVGAnimateElement>('feOffset > animate[attributeName=\"dx\"]'));\n    if (dxAnims.length >= 2) {\n      dxAnims[0].setAttribute('values', `${width}; 0`);\n      dxAnims[1].setAttribute('values', `0; -${width}`);\n    }\n\n    const baseDur = 6;\n    const dur = Math.max(0.001, baseDur / (speed || 1));\n    [...dyAnims, ...dxAnims].forEach(a => a.setAttribute('dur', `${dur}s`));\n\n    const disp = svg.querySelector('feDisplacementMap');\n    if (disp) disp.setAttribute('scale', String(30 * (chaos || 1)));\n\n    const filterEl = svg.querySelector<SVGFilterElement>(`#${CSS.escape(filterId)}`);\n    if (filterEl) {\n      filterEl.setAttribute('x', '-200%');\n      filterEl.setAttribute('y', '-200%');\n      filterEl.setAttribute('width', '500%');\n      filterEl.setAttribute('height', '500%');\n    }\n\n    requestAnimationFrame(() => {\n      [...dyAnims, ...dxAnims].forEach((a: any) => {\n        if (typeof a.beginElement === 'function') {\n          try {\n            a.beginElement();\n          } catch {}\n        }\n      });\n    });\n  };\n\n  useEffect(() => {\n    updateAnim();\n  }, [speed, chaos]);\n\n  useLayoutEffect(() => {\n    if (!rootRef.current) return;\n    const ro = new ResizeObserver(() => updateAnim());\n    ro.observe(rootRef.current);\n    updateAnim();\n    return () => ro.disconnect();\n  }, []);\n\n  const inheritRadius: CSSProperties = {\n    borderRadius: style?.borderRadius ?? 'inherit'\n  };\n\n  const strokeStyle: CSSProperties = {\n    ...inheritRadius,\n    borderWidth: thickness,\n    borderStyle: 'solid',\n    borderColor: color\n  };\n\n  const glow1Style: CSSProperties = {\n    ...inheritRadius,\n    borderWidth: thickness,\n    borderStyle: 'solid',\n    borderColor: hexToRgba(color, 0.6),\n    filter: `blur(${0.5 + thickness * 0.25}px)`,\n    opacity: 0.5\n  };\n\n  const glow2Style: CSSProperties = {\n    ...inheritRadius,\n    borderWidth: thickness,\n    borderStyle: 'solid',\n    borderColor: color,\n    filter: `blur(${2 + thickness * 0.5}px)`,\n    opacity: 0.5\n  };\n\n  const bgGlowStyle: CSSProperties = {\n    ...inheritRadius,\n    transform: 'scale(1.08)',\n    filter: 'blur(32px)',\n    opacity: 0.3,\n    zIndex: -1,\n    background: `linear-gradient(-30deg, ${hexToRgba(color, 0.8)}, transparent, ${color})`\n  };\n\n  return (\n    <div ref={rootRef} className={'relative isolate ' + (className ?? '')} style={style}>\n      <svg\n        ref={svgRef}\n        className=\"fixed -left-[10000px] -top-[10000px] w-[10px] h-[10px] opacity-[0.001] pointer-events-none\"\n        aria-hidden\n        focusable=\"false\"\n      >\n        <defs>\n          <filter id={filterId} colorInterpolationFilters=\"sRGB\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise1\" seed=\"1\" />\n            <feOffset in=\"noise1\" dx=\"0\" dy=\"0\" result=\"offsetNoise1\">\n              <animate attributeName=\"dy\" values=\"700; 0\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\n            </feOffset>\n\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise2\" seed=\"1\" />\n            <feOffset in=\"noise2\" dx=\"0\" dy=\"0\" result=\"offsetNoise2\">\n              <animate attributeName=\"dy\" values=\"0; -700\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\n            </feOffset>\n\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise1\" seed=\"2\" />\n            <feOffset in=\"noise1\" dx=\"0\" dy=\"0\" result=\"offsetNoise3\">\n              <animate attributeName=\"dx\" values=\"490; 0\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\n            </feOffset>\n\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise2\" seed=\"2\" />\n            <feOffset in=\"noise2\" dx=\"0\" dy=\"0\" result=\"offsetNoise4\">\n              <animate attributeName=\"dx\" values=\"0; -490\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\n            </feOffset>\n\n            <feComposite in=\"offsetNoise1\" in2=\"offsetNoise2\" result=\"part1\" />\n            <feComposite in=\"offsetNoise3\" in2=\"offsetNoise4\" result=\"part2\" />\n            <feBlend in=\"part1\" in2=\"part2\" mode=\"color-dodge\" result=\"combinedNoise\" />\n            <feDisplacementMap\n              in=\"SourceGraphic\"\n              in2=\"combinedNoise\"\n              scale=\"30\"\n              xChannelSelector=\"R\"\n              yChannelSelector=\"B\"\n            />\n          </filter>\n        </defs>\n      </svg>\n\n      <div className=\"absolute inset-0 pointer-events-none\" style={inheritRadius}>\n        <div ref={strokeRef} className=\"absolute inset-0 box-border\" style={strokeStyle} />\n        <div className=\"absolute inset-0 box-border\" style={glow1Style} />\n        <div className=\"absolute inset-0 box-border\" style={glow2Style} />\n        <div className=\"absolute inset-0\" style={bgGlowStyle} />\n      </div>\n\n      <div className=\"relative\" style={inheritRadius}>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default ElectricBorder;\n",
      "type": "registry:component"
    }
  ]
}
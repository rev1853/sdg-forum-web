{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "TextPressure-TS-TW",
  "type": "registry:block",
  "title": "TextPressure",
  "description": "Characters scale / warp interactively based on pointer pressure zone.",
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/TextAnimations/TextPressure/TextPressure.tsx",
      "content": "// Component ported from https://codepen.io/JuanFuentes/full/rgXKGQ\n\nimport { useEffect, useRef, useState } from 'react';\n\ninterface TextPressureProps {\n  text?: string;\n  fontFamily?: string;\n  fontUrl?: string;\n  width?: boolean;\n  weight?: boolean;\n  italic?: boolean;\n  alpha?: boolean;\n  flex?: boolean;\n  stroke?: boolean;\n  scale?: boolean;\n  textColor?: string;\n  strokeColor?: string;\n  strokeWidth?: number;\n  className?: string;\n  minFontSize?: number;\n}\n\nconst TextPressure: React.FC<TextPressureProps> = ({\n  text = 'Compressa',\n  fontFamily = 'Compressa VF',\n  fontUrl = 'https://res.cloudinary.com/dr6lvwubh/raw/upload/v1529908256/CompressaPRO-GX.woff2',\n  width = true,\n  weight = true,\n  italic = true,\n  alpha = false,\n  flex = true,\n  stroke = false,\n  scale = false,\n  textColor = '#FFFFFF',\n  strokeColor = '#FF0000',\n  strokeWidth = 2,\n  className = '',\n  minFontSize = 24\n}) => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const titleRef = useRef<HTMLHeadingElement | null>(null);\n  const spansRef = useRef<(HTMLSpanElement | null)[]>([]);\n\n  const mouseRef = useRef({ x: 0, y: 0 });\n  const cursorRef = useRef({ x: 0, y: 0 });\n\n  const [fontSize, setFontSize] = useState(minFontSize);\n  const [scaleY, setScaleY] = useState(1);\n  const [lineHeight, setLineHeight] = useState(1);\n\n  const chars = text.split('');\n\n  const dist = (a: { x: number; y: number }, b: { x: number; y: number }) => {\n    const dx = b.x - a.x;\n    const dy = b.y - a.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      cursorRef.current.x = e.clientX;\n      cursorRef.current.y = e.clientY;\n    };\n    const handleTouchMove = (e: TouchEvent) => {\n      const t = e.touches[0];\n      cursorRef.current.x = t.clientX;\n      cursorRef.current.y = t.clientY;\n    };\n\n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('touchmove', handleTouchMove, { passive: false });\n\n    if (containerRef.current) {\n      const { left, top, width, height } = containerRef.current.getBoundingClientRect();\n      mouseRef.current.x = left + width / 2;\n      mouseRef.current.y = top + height / 2;\n      cursorRef.current.x = mouseRef.current.x;\n      cursorRef.current.y = mouseRef.current.y;\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchmove', handleTouchMove);\n    };\n  }, []);\n\n  const setSize = () => {\n    if (!containerRef.current || !titleRef.current) return;\n\n    const { width: containerW, height: containerH } = containerRef.current.getBoundingClientRect();\n\n    let newFontSize = containerW / (chars.length / 2);\n    newFontSize = Math.max(newFontSize, minFontSize);\n\n    setFontSize(newFontSize);\n    setScaleY(1);\n    setLineHeight(1);\n\n    requestAnimationFrame(() => {\n      if (!titleRef.current) return;\n      const textRect = titleRef.current.getBoundingClientRect();\n\n      if (scale && textRect.height > 0) {\n        const yRatio = containerH / textRect.height;\n        setScaleY(yRatio);\n        setLineHeight(yRatio);\n      }\n    });\n  };\n\n  useEffect(() => {\n    setSize();\n    window.addEventListener('resize', setSize);\n    return () => window.removeEventListener('resize', setSize);\n  }, [scale, text]);\n\n  useEffect(() => {\n    let rafId: number;\n    const animate = () => {\n      mouseRef.current.x += (cursorRef.current.x - mouseRef.current.x) / 15;\n      mouseRef.current.y += (cursorRef.current.y - mouseRef.current.y) / 15;\n\n      if (titleRef.current) {\n        const titleRect = titleRef.current.getBoundingClientRect();\n        const maxDist = titleRect.width / 2;\n\n        spansRef.current.forEach(span => {\n          if (!span) return;\n\n          const rect = span.getBoundingClientRect();\n          const charCenter = {\n            x: rect.x + rect.width / 2,\n            y: rect.y + rect.height / 2\n          };\n\n          const d = dist(mouseRef.current, charCenter);\n\n          const getAttr = (distance: number, minVal: number, maxVal: number) => {\n            const val = maxVal - Math.abs((maxVal * distance) / maxDist);\n            return Math.max(minVal, val + minVal);\n          };\n\n          const wdth = width ? Math.floor(getAttr(d, 5, 200)) : 100;\n          const wght = weight ? Math.floor(getAttr(d, 100, 900)) : 400;\n          const italVal = italic ? getAttr(d, 0, 1).toFixed(2) : '0';\n          const alphaVal = alpha ? getAttr(d, 0, 1).toFixed(2) : '1';\n\n          span.style.opacity = alphaVal;\n          span.style.fontVariationSettings = `'wght' ${wght}, 'wdth' ${wdth}, 'ital' ${italVal}`;\n        });\n      }\n\n      rafId = requestAnimationFrame(animate);\n    };\n\n    animate();\n    return () => cancelAnimationFrame(rafId);\n  }, [width, weight, italic, alpha, chars.length]);\n\n  return (\n    <div ref={containerRef} className=\"relative w-full h-full overflow-hidden bg-transparent\">\n      <style>{`\n        @font-face {\n          font-family: '${fontFamily}';\n          src: url('${fontUrl}');\n          font-style: normal;\n        }\n        .stroke span {\n          position: relative;\n          color: ${textColor};\n        }\n        .stroke span::after {\n          content: attr(data-char);\n          position: absolute;\n          left: 0;\n          top: 0;\n          color: transparent;\n          z-index: -1;\n          -webkit-text-stroke-width: ${strokeWidth}px;\n          -webkit-text-stroke-color: ${strokeColor};\n        }\n      `}</style>\n\n      <h1\n        ref={titleRef}\n        className={`text-pressure-title ${className} ${\n          flex ? 'flex justify-between' : ''\n        } ${stroke ? 'stroke' : ''} uppercase text-center`}\n        style={{\n          fontFamily,\n          fontSize: fontSize,\n          lineHeight,\n          transform: `scale(1, ${scaleY})`,\n          transformOrigin: 'center top',\n          margin: 0,\n          fontWeight: 100,\n          color: stroke ? undefined : textColor\n        }}\n      >\n        {chars.map((char, i) => (\n          <span\n            key={i}\n            ref={el => {\n              spansRef.current[i] = el;\n            }}\n            data-char={char}\n            className=\"inline-block\"\n          >\n            {char}\n          </span>\n        ))}\n      </h1>\n    </div>\n  );\n};\n\nexport default TextPressure;\n",
      "type": "registry:component"
    }
  ]
}
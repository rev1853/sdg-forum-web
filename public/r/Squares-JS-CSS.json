{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Squares-JS-CSS",
  "type": "registry:block",
  "title": "Squares",
  "description": "Animated squares with scaling + direction customization.",
  "files": [
    {
      "path": "public/default/src/content/Backgrounds/Squares/Squares.jsx",
      "content": "import { useRef, useEffect } from 'react';\nimport './Squares.css';\n\nconst Squares = ({\n  direction = 'right',\n  speed = 1,\n  borderColor = '#999',\n  squareSize = 40,\n  hoverFillColor = '#222',\n  className = ''\n}) => {\n  const canvasRef = useRef(null);\n  const requestRef = useRef(null);\n  const numSquaresX = useRef();\n  const numSquaresY = useRef();\n  const gridOffset = useRef({ x: 0, y: 0 });\n  const hoveredSquare = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    const resizeCanvas = () => {\n      canvas.width = canvas.offsetWidth;\n      canvas.height = canvas.offsetHeight;\n      numSquaresX.current = Math.ceil(canvas.width / squareSize) + 1;\n      numSquaresY.current = Math.ceil(canvas.height / squareSize) + 1;\n    };\n\n    window.addEventListener('resize', resizeCanvas);\n    resizeCanvas();\n\n    const drawGrid = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      const startX = Math.floor(gridOffset.current.x / squareSize) * squareSize;\n      const startY = Math.floor(gridOffset.current.y / squareSize) * squareSize;\n\n      for (let x = startX; x < canvas.width + squareSize; x += squareSize) {\n        for (let y = startY; y < canvas.height + squareSize; y += squareSize) {\n          const squareX = x - (gridOffset.current.x % squareSize);\n          const squareY = y - (gridOffset.current.y % squareSize);\n\n          if (\n            hoveredSquare.current &&\n            Math.floor((x - startX) / squareSize) === hoveredSquare.current.x &&\n            Math.floor((y - startY) / squareSize) === hoveredSquare.current.y\n          ) {\n            ctx.fillStyle = hoverFillColor;\n            ctx.fillRect(squareX, squareY, squareSize, squareSize);\n          }\n\n          ctx.strokeStyle = borderColor;\n          ctx.strokeRect(squareX, squareY, squareSize, squareSize);\n        }\n      }\n\n      const gradient = ctx.createRadialGradient(\n        canvas.width / 2,\n        canvas.height / 2,\n        0,\n        canvas.width / 2,\n        canvas.height / 2,\n        Math.sqrt(canvas.width ** 2 + canvas.height ** 2) / 2\n      );\n      gradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\n\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    };\n\n    const updateAnimation = () => {\n      const effectiveSpeed = Math.max(speed, 0.1);\n      switch (direction) {\n        case 'right':\n          gridOffset.current.x = (gridOffset.current.x - effectiveSpeed + squareSize) % squareSize;\n          break;\n        case 'left':\n          gridOffset.current.x = (gridOffset.current.x + effectiveSpeed + squareSize) % squareSize;\n          break;\n        case 'up':\n          gridOffset.current.y = (gridOffset.current.y + effectiveSpeed + squareSize) % squareSize;\n          break;\n        case 'down':\n          gridOffset.current.y = (gridOffset.current.y - effectiveSpeed + squareSize) % squareSize;\n          break;\n        case 'diagonal':\n          gridOffset.current.x = (gridOffset.current.x - effectiveSpeed + squareSize) % squareSize;\n          gridOffset.current.y = (gridOffset.current.y - effectiveSpeed + squareSize) % squareSize;\n          break;\n        default:\n          break;\n      }\n\n      drawGrid();\n      requestRef.current = requestAnimationFrame(updateAnimation);\n    };\n\n    const handleMouseMove = event => {\n      const rect = canvas.getBoundingClientRect();\n      const mouseX = event.clientX - rect.left;\n      const mouseY = event.clientY - rect.top;\n\n      const startX = Math.floor(gridOffset.current.x / squareSize) * squareSize;\n      const startY = Math.floor(gridOffset.current.y / squareSize) * squareSize;\n\n      const hoveredSquareX = Math.floor((mouseX + gridOffset.current.x - startX) / squareSize);\n      const hoveredSquareY = Math.floor((mouseY + gridOffset.current.y - startY) / squareSize);\n\n      if (\n        !hoveredSquare.current ||\n        hoveredSquare.current.x !== hoveredSquareX ||\n        hoveredSquare.current.y !== hoveredSquareY\n      ) {\n        hoveredSquare.current = { x: hoveredSquareX, y: hoveredSquareY };\n      }\n    };\n\n    const handleMouseLeave = () => {\n      hoveredSquare.current = null;\n    };\n\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('mouseleave', handleMouseLeave);\n\n    requestRef.current = requestAnimationFrame(updateAnimation);\n\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      cancelAnimationFrame(requestRef.current);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('mouseleave', handleMouseLeave);\n    };\n  }, [direction, speed, borderColor, hoverFillColor, squareSize]);\n\n  return <canvas ref={canvasRef} className={`squares-canvas ${className}`}></canvas>;\n};\n\nexport default Squares;\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Backgrounds/Squares/Squares.css",
      "content": ".squares-canvas {\n  width: 100%;\n  height: 100%;\n  border: none;\n  display: block;\n}\n",
      "type": "registry:item"
    }
  ]
}
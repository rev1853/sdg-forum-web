{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "TargetCursor-JS-CSS",
  "type": "registry:block",
  "title": "TargetCursor",
  "description": "A cursor follow animation with 4 corners that lock onto targets.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/default/src/content/Animations/TargetCursor/TargetCursor.jsx",
      "content": "import { useEffect, useRef, useCallback, useMemo } from 'react';\nimport { gsap } from 'gsap';\nimport './TargetCursor.css';\n\nconst TargetCursor = ({ targetSelector = '.cursor-target', spinDuration = 2, hideDefaultCursor = true }) => {\n  const cursorRef = useRef(null);\n  const cornersRef = useRef(null);\n  const spinTl = useRef(null);\n  const dotRef = useRef(null);\n  const constants = useMemo(\n    () => ({\n      borderWidth: 3,\n      cornerSize: 12,\n      parallaxStrength: 0.00005\n    }),\n    []\n  );\n\n  const moveCursor = useCallback((x, y) => {\n    if (!cursorRef.current) return;\n    gsap.to(cursorRef.current, {\n      x,\n      y,\n      duration: 0.1,\n      ease: 'power3.out'\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!cursorRef.current) return;\n\n    const originalCursor = document.body.style.cursor;\n    if (hideDefaultCursor) {\n      document.body.style.cursor = 'none';\n    }\n\n    const cursor = cursorRef.current;\n    cornersRef.current = cursor.querySelectorAll('.target-cursor-corner');\n\n    let activeTarget = null;\n    let currentTargetMove = null;\n    let currentLeaveHandler = null;\n    let isAnimatingToTarget = false;\n    let resumeTimeout = null;\n\n    const cleanupTarget = target => {\n      if (currentTargetMove) {\n        target.removeEventListener('mousemove', currentTargetMove);\n      }\n      if (currentLeaveHandler) {\n        target.removeEventListener('mouseleave', currentLeaveHandler);\n      }\n      currentTargetMove = null;\n      currentLeaveHandler = null;\n    };\n\n    gsap.set(cursor, {\n      xPercent: -50,\n      yPercent: -50,\n      x: window.innerWidth / 2,\n      y: window.innerHeight / 2\n    });\n\n    const createSpinTimeline = () => {\n      if (spinTl.current) {\n        spinTl.current.kill();\n      }\n      spinTl.current = gsap\n        .timeline({ repeat: -1 })\n        .to(cursor, { rotation: '+=360', duration: spinDuration, ease: 'none' });\n    };\n\n    createSpinTimeline();\n\n    const moveHandler = e => moveCursor(e.clientX, e.clientY);\n    window.addEventListener('mousemove', moveHandler);\n\n    const scrollHandler = () => {\n      if (!activeTarget || !cursorRef.current) return;\n\n      const mouseX = gsap.getProperty(cursorRef.current, 'x');\n      const mouseY = gsap.getProperty(cursorRef.current, 'y');\n\n      const elementUnderMouse = document.elementFromPoint(mouseX, mouseY);\n      const isStillOverTarget =\n        elementUnderMouse &&\n        (elementUnderMouse === activeTarget || elementUnderMouse.closest(targetSelector) === activeTarget);\n\n      if (!isStillOverTarget) {\n        if (currentLeaveHandler) {\n          currentLeaveHandler();\n        }\n      }\n    };\n\n    window.addEventListener('scroll', scrollHandler, { passive: true });\n\n    //---------------------------------------------------------------\n    // This code for onclick animation\n\n    window.addEventListener('mousemove', moveHandler);\n    const mouseDownHandler = () => {\n      if (!dotRef.current) return;\n      gsap.to(dotRef.current, { scale: 0.7, duration: 0.3 });\n      gsap.to(cursorRef.current, { scale: 0.9, duration: 0.2 });\n    };\n\n    // Animate it back to its original size\n    const mouseUpHandler = () => {\n      if (!dotRef.current) return;\n      gsap.to(dotRef.current, { scale: 1, duration: 0.3 });\n      gsap.to(cursorRef.current, { scale: 1, duration: 0.2 });\n    };\n\n    window.addEventListener('mousedown', mouseDownHandler);\n    window.addEventListener('mouseup', mouseUpHandler);\n\n    //----------------------------------------------------------------\n    const enterHandler = e => {\n      const directTarget = e.target;\n\n      const allTargets = [];\n      let current = directTarget;\n      while (current && current !== document.body) {\n        if (current.matches(targetSelector)) {\n          allTargets.push(current);\n        }\n        current = current.parentElement;\n      }\n\n      const target = allTargets[0] || null;\n      if (!target || !cursorRef.current || !cornersRef.current) return;\n\n      if (activeTarget === target) return;\n\n      if (activeTarget) {\n        cleanupTarget(activeTarget);\n      }\n\n      if (resumeTimeout) {\n        clearTimeout(resumeTimeout);\n        resumeTimeout = null;\n      }\n\n      activeTarget = target;\n      const corners = Array.from(cornersRef.current);\n      corners.forEach(corner => {\n        gsap.killTweensOf(corner);\n      });\n\n      gsap.killTweensOf(cursorRef.current, 'rotation');\n      spinTl.current?.pause();\n\n      gsap.set(cursorRef.current, { rotation: 0 });\n\n      const updateCorners = (mouseX, mouseY) => {\n        const rect = target.getBoundingClientRect();\n        const cursorRect = cursorRef.current.getBoundingClientRect();\n\n        const cursorCenterX = cursorRect.left + cursorRect.width / 2;\n        const cursorCenterY = cursorRect.top + cursorRect.height / 2;\n\n        const [tlc, trc, brc, blc] = Array.from(cornersRef.current);\n\n        const { borderWidth, cornerSize, parallaxStrength } = constants;\n\n        let tlOffset = {\n          x: rect.left - cursorCenterX - borderWidth,\n          y: rect.top - cursorCenterY - borderWidth\n        };\n        let trOffset = {\n          x: rect.right - cursorCenterX + borderWidth - cornerSize,\n          y: rect.top - cursorCenterY - borderWidth\n        };\n        let brOffset = {\n          x: rect.right - cursorCenterX + borderWidth - cornerSize,\n          y: rect.bottom - cursorCenterY + borderWidth - cornerSize\n        };\n        let blOffset = {\n          x: rect.left - cursorCenterX - borderWidth,\n          y: rect.bottom - cursorCenterY + borderWidth - cornerSize\n        };\n\n        if (mouseX !== undefined && mouseY !== undefined) {\n          const targetCenterX = rect.left + rect.width / 2;\n          const targetCenterY = rect.top + rect.height / 2;\n          const mouseOffsetX = (mouseX - targetCenterX) * parallaxStrength;\n          const mouseOffsetY = (mouseY - targetCenterY) * parallaxStrength;\n\n          tlOffset.x += mouseOffsetX;\n          tlOffset.y += mouseOffsetY;\n          trOffset.x += mouseOffsetX;\n          trOffset.y += mouseOffsetY;\n          brOffset.x += mouseOffsetX;\n          brOffset.y += mouseOffsetY;\n          blOffset.x += mouseOffsetX;\n          blOffset.y += mouseOffsetY;\n        }\n\n        const tl = gsap.timeline();\n        const corners = [tlc, trc, brc, blc];\n        const offsets = [tlOffset, trOffset, brOffset, blOffset];\n\n        corners.forEach((corner, index) => {\n          tl.to(\n            corner,\n            {\n              x: offsets[index].x,\n              y: offsets[index].y,\n              duration: 0.2,\n              ease: 'power2.out'\n            },\n            0\n          );\n        });\n      };\n\n      isAnimatingToTarget = true;\n      updateCorners();\n\n      setTimeout(() => {\n        isAnimatingToTarget = false;\n      }, 1);\n\n      let moveThrottle = null;\n      const targetMove = ev => {\n        if (moveThrottle || isAnimatingToTarget) return;\n        moveThrottle = requestAnimationFrame(() => {\n          const mouseEvent = ev;\n          updateCorners(mouseEvent.clientX, mouseEvent.clientY);\n          moveThrottle = null;\n        });\n      };\n\n      const leaveHandler = () => {\n        activeTarget = null;\n        isAnimatingToTarget = false;\n\n        if (cornersRef.current) {\n          const corners = Array.from(cornersRef.current);\n          gsap.killTweensOf(corners);\n\n          const { cornerSize } = constants;\n          const positions = [\n            { x: -cornerSize * 1.5, y: -cornerSize * 1.5 },\n            { x: cornerSize * 0.5, y: -cornerSize * 1.5 },\n            { x: cornerSize * 0.5, y: cornerSize * 0.5 },\n            { x: -cornerSize * 1.5, y: cornerSize * 0.5 }\n          ];\n\n          const tl = gsap.timeline();\n          corners.forEach((corner, index) => {\n            tl.to(\n              corner,\n              {\n                x: positions[index].x,\n                y: positions[index].y,\n                duration: 0.3,\n                ease: 'power3.out'\n              },\n              0\n            );\n          });\n        }\n\n        resumeTimeout = setTimeout(() => {\n          if (!activeTarget && cursorRef.current && spinTl.current) {\n            const currentRotation = gsap.getProperty(cursorRef.current, 'rotation');\n            const normalizedRotation = currentRotation % 360;\n\n            spinTl.current.kill();\n            spinTl.current = gsap\n              .timeline({ repeat: -1 })\n              .to(cursorRef.current, { rotation: '+=360', duration: spinDuration, ease: 'none' });\n\n            gsap.to(cursorRef.current, {\n              rotation: normalizedRotation + 360,\n              duration: spinDuration * (1 - normalizedRotation / 360),\n              ease: 'none',\n              onComplete: () => {\n                spinTl.current?.restart();\n              }\n            });\n          }\n          resumeTimeout = null;\n        }, 50);\n\n        cleanupTarget(target);\n      };\n\n      currentTargetMove = targetMove;\n      currentLeaveHandler = leaveHandler;\n\n      target.addEventListener('mousemove', targetMove);\n      target.addEventListener('mouseleave', leaveHandler);\n    };\n\n    window.addEventListener('mouseover', enterHandler, { passive: true });\n\n    return () => {\n      window.removeEventListener('mousemove', moveHandler);\n      window.removeEventListener('mouseover', enterHandler);\n      window.removeEventListener('scroll', scrollHandler);\n\n      if (activeTarget) {\n        cleanupTarget(activeTarget);\n      }\n\n      console.log('Cleaning up TargetCursor');\n\n      spinTl.current?.kill();\n      document.body.style.cursor = originalCursor;\n    };\n  }, [targetSelector, spinDuration, moveCursor, constants, hideDefaultCursor]);\n\n  useEffect(() => {\n    if (!cursorRef.current || !spinTl.current) return;\n\n    if (spinTl.current.isActive()) {\n      spinTl.current.kill();\n      spinTl.current = gsap\n        .timeline({ repeat: -1 })\n        .to(cursorRef.current, { rotation: '+=360', duration: spinDuration, ease: 'none' });\n    }\n  }, [spinDuration]);\n\n  return (\n    <div ref={cursorRef} className=\"target-cursor-wrapper\">\n      <div ref={dotRef} className=\"target-cursor-dot\" />\n      <div className=\"target-cursor-corner corner-tl\" />\n      <div className=\"target-cursor-corner corner-tr\" />\n      <div className=\"target-cursor-corner corner-br\" />\n      <div className=\"target-cursor-corner corner-bl\" />\n    </div>\n  );\n};\n\nexport default TargetCursor;\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Animations/TargetCursor/TargetCursor.css",
      "content": ".target-cursor-wrapper {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 0;\n  height: 0;\n  pointer-events: none;\n  z-index: 9999;\n  mix-blend-mode: difference;\n  transform: translate(-50%, -50%);\n}\n\n.target-cursor-dot {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  width: 4px;\n  height: 4px;\n  background: #fff;\n  border-radius: 50%;\n  transform: translate(-50%, -50%);\n  will-change: transform;\n}\n\n.target-cursor-corner {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  width: 12px;\n  height: 12px;\n  border: 3px solid #fff;\n  will-change: transform;\n}\n\n.corner-tl {\n  transform: translate(-150%, -150%);\n  border-right: none;\n  border-bottom: none;\n}\n\n.corner-tr {\n  transform: translate(50%, -150%);\n  border-left: none;\n  border-bottom: none;\n}\n\n.corner-br {\n  transform: translate(50%, 50%);\n  border-left: none;\n  border-top: none;\n}\n\n.corner-bl {\n  transform: translate(-150%, 50%);\n  border-right: none;\n  border-top: none;\n}\n",
      "type": "registry:item"
    }
  ]
}
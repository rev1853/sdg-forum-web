{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Counter-JS-TW",
  "type": "registry:block",
  "title": "Counter",
  "description": "Flexible animated counter supporting increments + easing.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Components/Counter/Counter.jsx",
      "content": "import { motion, useSpring, useTransform } from 'motion/react';\nimport { useEffect } from 'react';\n\nfunction Number({ mv, number, height }) {\n  let y = useTransform(mv, latest => {\n    let placeValue = latest % 10;\n    let offset = (10 + number - placeValue) % 10;\n    let memo = offset * height;\n    if (offset > 5) {\n      memo -= 10 * height;\n    }\n    return memo;\n  });\n\n  const style = {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  };\n\n  return <motion.span style={{ ...style, y }}>{number}</motion.span>;\n}\n\nfunction Digit({ place, value, height, digitStyle }) {\n  let valueRoundedToPlace = Math.floor(value / place);\n  let animatedValue = useSpring(valueRoundedToPlace);\n\n  useEffect(() => {\n    animatedValue.set(valueRoundedToPlace);\n  }, [animatedValue, valueRoundedToPlace]);\n\n  const defaultStyle = {\n    height,\n    position: 'relative',\n    width: '1ch',\n    fontVariantNumeric: 'tabular-nums'\n  };\n\n  return (\n    <div style={{ ...defaultStyle, ...digitStyle }}>\n      {Array.from({ length: 10 }, (_, i) => (\n        <Number key={i} mv={animatedValue} number={i} height={height} />\n      ))}\n    </div>\n  );\n}\n\nexport default function Counter({\n  value,\n  fontSize = 100,\n  padding = 0,\n  places = [100, 10, 1],\n  gap = 8,\n  borderRadius = 4,\n  horizontalPadding = 8,\n  textColor = 'white',\n  fontWeight = 'bold',\n  containerStyle,\n  counterStyle,\n  digitStyle,\n  gradientHeight = 16,\n  gradientFrom = 'black',\n  gradientTo = 'transparent',\n  topGradientStyle,\n  bottomGradientStyle\n}) {\n  const height = fontSize + padding;\n\n  const defaultContainerStyle = {\n    position: 'relative',\n    display: 'inline-block'\n  };\n\n  const defaultCounterStyle = {\n    fontSize,\n    display: 'flex',\n    gap: gap,\n    overflow: 'hidden',\n    borderRadius: borderRadius,\n    paddingLeft: horizontalPadding,\n    paddingRight: horizontalPadding,\n    lineHeight: 1,\n    color: textColor,\n    fontWeight: fontWeight\n  };\n\n  const gradientContainerStyle = {\n    pointerEvents: 'none',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  };\n\n  const defaultTopGradientStyle = {\n    height: gradientHeight,\n    background: `linear-gradient(to bottom, ${gradientFrom}, ${gradientTo})`\n  };\n\n  const defaultBottomGradientStyle = {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n    height: gradientHeight,\n    background: `linear-gradient(to top, ${gradientFrom}, ${gradientTo})`\n  };\n\n  return (\n    <div style={{ ...defaultContainerStyle, ...containerStyle }}>\n      <div style={{ ...defaultCounterStyle, ...counterStyle }}>\n        {places.map(place => (\n          <Digit key={place} place={place} value={value} height={height} digitStyle={digitStyle} />\n        ))}\n      </div>\n      <div style={gradientContainerStyle}>\n        <div style={topGradientStyle ? topGradientStyle : defaultTopGradientStyle} />\n        <div style={bottomGradientStyle ? bottomGradientStyle : defaultBottomGradientStyle} />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}
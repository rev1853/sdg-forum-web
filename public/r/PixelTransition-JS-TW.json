{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "PixelTransition-JS-TW",
  "type": "registry:block",
  "title": "PixelTransition",
  "description": "Pixel dissolve transition for content reveal on hover.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Animations/PixelTransition/PixelTransition.jsx",
      "content": "import { useRef, useEffect, useState } from 'react';\nimport { gsap } from 'gsap';\n\nfunction PixelTransition({\n  firstContent,\n  secondContent,\n  gridSize = 7,\n  pixelColor = 'currentColor',\n  animationStepDuration = 0.3,\n  className = '',\n  style = {},\n  aspectRatio = '100%'\n}) {\n  const containerRef = useRef(null);\n  const pixelGridRef = useRef(null);\n  const activeRef = useRef(null);\n  const delayedCallRef = useRef(null);\n\n  const [isActive, setIsActive] = useState(false);\n\n  const isTouchDevice =\n    'ontouchstart' in window || navigator.maxTouchPoints > 0 || window.matchMedia('(pointer: coarse)').matches;\n\n  useEffect(() => {\n    const pixelGridEl = pixelGridRef.current;\n    if (!pixelGridEl) return;\n\n    pixelGridEl.innerHTML = '';\n\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col < gridSize; col++) {\n        const pixel = document.createElement('div');\n        pixel.classList.add('pixelated-image-card__pixel');\n        pixel.classList.add('absolute', 'hidden');\n        pixel.style.backgroundColor = pixelColor;\n\n        const size = 100 / gridSize;\n        pixel.style.width = `${size}%`;\n        pixel.style.height = `${size}%`;\n        pixel.style.left = `${col * size}%`;\n        pixel.style.top = `${row * size}%`;\n\n        pixelGridEl.appendChild(pixel);\n      }\n    }\n  }, [gridSize, pixelColor]);\n\n  const animatePixels = activate => {\n    setIsActive(activate);\n\n    const pixelGridEl = pixelGridRef.current;\n    const activeEl = activeRef.current;\n    if (!pixelGridEl || !activeEl) return;\n\n    const pixels = pixelGridEl.querySelectorAll('.pixelated-image-card__pixel');\n    if (!pixels.length) return;\n\n    gsap.killTweensOf(pixels);\n    if (delayedCallRef.current) {\n      delayedCallRef.current.kill();\n    }\n\n    gsap.set(pixels, { display: 'none' });\n\n    const totalPixels = pixels.length;\n    const staggerDuration = animationStepDuration / totalPixels;\n\n    gsap.to(pixels, {\n      display: 'block',\n      duration: 0,\n      stagger: {\n        each: staggerDuration,\n        from: 'random'\n      }\n    });\n\n    delayedCallRef.current = gsap.delayedCall(animationStepDuration, () => {\n      activeEl.style.display = activate ? 'block' : 'none';\n      activeEl.style.pointerEvents = activate ? 'none' : '';\n    });\n\n    gsap.to(pixels, {\n      display: 'none',\n      duration: 0,\n      delay: animationStepDuration,\n      stagger: {\n        each: staggerDuration,\n        from: 'random'\n      }\n    });\n  };\n\n  const handleMouseEnter = () => {\n    if (!isActive) animatePixels(true);\n  };\n  const handleMouseLeave = () => {\n    if (isActive) animatePixels(false);\n  };\n  const handleClick = () => {\n    animatePixels(!isActive);\n  };\n\n  return (\n    <div\n      ref={containerRef}\n      className={`\n        ${className}\n        bg-[#271E37]\n        text-white\n        rounded-[15px]\n        border-2\n        border-white\n        w-[300px]\n        max-w-full\n        relative\n        overflow-hidden\n      `}\n      style={style}\n      onMouseEnter={!isTouchDevice ? handleMouseEnter : undefined}\n      onMouseLeave={!isTouchDevice ? handleMouseLeave : undefined}\n      onClick={isTouchDevice ? handleClick : undefined}\n    >\n      <div style={{ paddingTop: aspectRatio }} />\n\n      <div className=\"absolute inset-0 w-full h-full\">{firstContent}</div>\n\n      <div ref={activeRef} className=\"absolute inset-0 w-full h-full z-[2]\" style={{ display: 'none' }}>\n        {secondContent}\n      </div>\n\n      <div ref={pixelGridRef} className=\"absolute inset-0 w-full h-full pointer-events-none z-[3]\" />\n    </div>\n  );\n}\n\nexport default PixelTransition;\n",
      "type": "registry:component"
    }
  ]
}
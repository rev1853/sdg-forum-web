{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Lanyard-JS-TW",
  "type": "registry:block",
  "title": "Lanyard",
  "description": "Swinging 3D lanyard / badge card with realistic inertial motion.",
  "dependencies": [
    "@react-three/drei",
    "@react-three/fiber",
    "@react-three/rapier",
    "meshline",
    "three"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Components/Lanyard/Lanyard.jsx",
      "content": "/* eslint-disable react/no-unknown-property */\n'use client';\nimport { useEffect, useRef, useState } from 'react';\nimport { Canvas, extend, useFrame } from '@react-three/fiber';\nimport { useGLTF, useTexture, Environment, Lightformer } from '@react-three/drei';\nimport { BallCollider, CuboidCollider, Physics, RigidBody, useRopeJoint, useSphericalJoint } from '@react-three/rapier';\nimport { MeshLineGeometry, MeshLineMaterial } from 'meshline';\n\n// replace with your own imports, see the usage snippet for details\nimport cardGLB from './card.glb';\nimport lanyard from './lanyard.png';\n\nimport * as THREE from 'three';\n\nextend({ MeshLineGeometry, MeshLineMaterial });\n\nexport default function Lanyard({ position = [0, 0, 30], gravity = [0, -40, 0], fov = 20, transparent = true }) {\n  return (\n    <div className=\"relative z-0 w-full h-screen flex justify-center items-center transform scale-100 origin-center\">\n      <Canvas\n        camera={{ position: position, fov: fov }}\n        gl={{ alpha: transparent }}\n        onCreated={({ gl }) => gl.setClearColor(new THREE.Color(0x000000), transparent ? 0 : 1)}\n      >\n        <ambientLight intensity={Math.PI} />\n        <Physics gravity={gravity} timeStep={1 / 60}>\n          <Band />\n        </Physics>\n        <Environment blur={0.75}>\n          <Lightformer\n            intensity={2}\n            color=\"white\"\n            position={[0, -1, 5]}\n            rotation={[0, 0, Math.PI / 3]}\n            scale={[100, 0.1, 1]}\n          />\n          <Lightformer\n            intensity={3}\n            color=\"white\"\n            position={[-1, -1, 1]}\n            rotation={[0, 0, Math.PI / 3]}\n            scale={[100, 0.1, 1]}\n          />\n          <Lightformer\n            intensity={3}\n            color=\"white\"\n            position={[1, 1, 1]}\n            rotation={[0, 0, Math.PI / 3]}\n            scale={[100, 0.1, 1]}\n          />\n          <Lightformer\n            intensity={10}\n            color=\"white\"\n            position={[-10, 0, 14]}\n            rotation={[0, Math.PI / 2, Math.PI / 3]}\n            scale={[100, 10, 1]}\n          />\n        </Environment>\n      </Canvas>\n    </div>\n  );\n}\nfunction Band({ maxSpeed = 50, minSpeed = 0 }) {\n  const band = useRef(),\n    fixed = useRef(),\n    j1 = useRef(),\n    j2 = useRef(),\n    j3 = useRef(),\n    card = useRef();\n  const vec = new THREE.Vector3(),\n    ang = new THREE.Vector3(),\n    rot = new THREE.Vector3(),\n    dir = new THREE.Vector3();\n  const segmentProps = { type: 'dynamic', canSleep: true, colliders: false, angularDamping: 4, linearDamping: 4 };\n  const { nodes, materials } = useGLTF(cardGLB);\n  const texture = useTexture(lanyard);\n  const [curve] = useState(\n    () =>\n      new THREE.CatmullRomCurve3([new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()])\n  );\n  const [dragged, drag] = useState(false);\n  const [hovered, hover] = useState(false);\n  const [isSmall, setIsSmall] = useState(() => typeof window !== 'undefined' && window.innerWidth < 1024);\n\n  useRopeJoint(fixed, j1, [[0, 0, 0], [0, 0, 0], 1]);\n  useRopeJoint(j1, j2, [[0, 0, 0], [0, 0, 0], 1]);\n  useRopeJoint(j2, j3, [[0, 0, 0], [0, 0, 0], 1]);\n  useSphericalJoint(j3, card, [\n    [0, 0, 0],\n    [0, 1.5, 0]\n  ]);\n\n  useEffect(() => {\n    if (hovered) {\n      document.body.style.cursor = dragged ? 'grabbing' : 'grab';\n      return () => void (document.body.style.cursor = 'auto');\n    }\n  }, [hovered, dragged]);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setIsSmall(window.innerWidth < 1024);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  useFrame((state, delta) => {\n    if (dragged) {\n      vec.set(state.pointer.x, state.pointer.y, 0.5).unproject(state.camera);\n      dir.copy(vec).sub(state.camera.position).normalize();\n      vec.add(dir.multiplyScalar(state.camera.position.length()));\n      [card, j1, j2, j3, fixed].forEach(ref => ref.current?.wakeUp());\n      card.current?.setNextKinematicTranslation({ x: vec.x - dragged.x, y: vec.y - dragged.y, z: vec.z - dragged.z });\n    }\n    if (fixed.current) {\n      [j1, j2].forEach(ref => {\n        if (!ref.current.lerped) ref.current.lerped = new THREE.Vector3().copy(ref.current.translation());\n        const clampedDistance = Math.max(0.1, Math.min(1, ref.current.lerped.distanceTo(ref.current.translation())));\n        ref.current.lerped.lerp(\n          ref.current.translation(),\n          delta * (minSpeed + clampedDistance * (maxSpeed - minSpeed))\n        );\n      });\n      curve.points[0].copy(j3.current.translation());\n      curve.points[1].copy(j2.current.lerped);\n      curve.points[2].copy(j1.current.lerped);\n      curve.points[3].copy(fixed.current.translation());\n      band.current.geometry.setPoints(curve.getPoints(32));\n      ang.copy(card.current.angvel());\n      rot.copy(card.current.rotation());\n      card.current.setAngvel({ x: ang.x, y: ang.y - rot.y * 0.25, z: ang.z });\n    }\n  });\n\n  curve.curveType = 'chordal';\n  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\n  return (\n    <>\n      <group position={[0, 4, 0]}>\n        <RigidBody ref={fixed} {...segmentProps} type=\"fixed\" />\n        <RigidBody position={[0.5, 0, 0]} ref={j1} {...segmentProps}>\n          <BallCollider args={[0.1]} />\n        </RigidBody>\n        <RigidBody position={[1, 0, 0]} ref={j2} {...segmentProps}>\n          <BallCollider args={[0.1]} />\n        </RigidBody>\n        <RigidBody position={[1.5, 0, 0]} ref={j3} {...segmentProps}>\n          <BallCollider args={[0.1]} />\n        </RigidBody>\n        <RigidBody position={[2, 0, 0]} ref={card} {...segmentProps} type={dragged ? 'kinematicPosition' : 'dynamic'}>\n          <CuboidCollider args={[0.8, 1.125, 0.01]} />\n          <group\n            scale={2.25}\n            position={[0, -1.2, -0.05]}\n            onPointerOver={() => hover(true)}\n            onPointerOut={() => hover(false)}\n            onPointerUp={e => (e.target.releasePointerCapture(e.pointerId), drag(false))}\n            onPointerDown={e => (\n              e.target.setPointerCapture(e.pointerId),\n              drag(new THREE.Vector3().copy(e.point).sub(vec.copy(card.current.translation())))\n            )}\n          >\n            <mesh geometry={nodes.card.geometry}>\n              <meshPhysicalMaterial\n                map={materials.base.map}\n                map-anisotropy={16}\n                clearcoat={1}\n                clearcoatRoughness={0.15}\n                roughness={0.9}\n                metalness={0.8}\n              />\n            </mesh>\n            <mesh geometry={nodes.clip.geometry} material={materials.metal} material-roughness={0.3} />\n            <mesh geometry={nodes.clamp.geometry} material={materials.metal} />\n          </group>\n        </RigidBody>\n      </group>\n      <mesh ref={band}>\n        <meshLineGeometry />\n        <meshLineMaterial\n          color=\"white\"\n          depthTest={false}\n          resolution={isSmall ? [1000, 2000] : [1000, 1000]}\n          useMap\n          map={texture}\n          repeat={[-4, 1]}\n          lineWidth={1}\n        />\n      </mesh>\n    </>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}
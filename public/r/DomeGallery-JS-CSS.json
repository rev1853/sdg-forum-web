{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "DomeGallery-JS-CSS",
  "type": "registry:block",
  "title": "DomeGallery",
  "description": "Immersive 3D dome gallery projecting images on a hemispheric surface.",
  "dependencies": [
    "@use-gesture/react"
  ],
  "files": [
    {
      "path": "public/default/src/content/Components/DomeGallery/DomeGallery.jsx",
      "content": "import { useEffect, useMemo, useRef, useCallback } from 'react';\nimport { useGesture } from '@use-gesture/react';\nimport './DomeGallery.css';\n\nconst DEFAULT_IMAGES = [\n  {\n    src: 'https://images.unsplash.com/photo-1755331039789-7e5680e26e8f?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n    alt: 'Abstract art'\n  },\n  {\n    src: 'https://images.unsplash.com/photo-1755569309049-98410b94f66d?q=80&w=772&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n    alt: 'Modern sculpture'\n  },\n  {\n    src: 'https://images.unsplash.com/photo-1755497595318-7e5e3523854f?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n    alt: 'Digital artwork'\n  },\n  {\n    src: 'https://images.unsplash.com/photo-1755353985163-c2a0fe5ac3d8?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n    alt: 'Contemporary art'\n  },\n  {\n    src: 'https://images.unsplash.com/photo-1745965976680-d00be7dc0377?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n    alt: 'Geometric pattern'\n  },\n  {\n    src: 'https://images.unsplash.com/photo-1752588975228-21f44630bb3c?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n    alt: 'Textured surface'\n  },\n  { src: 'https://pbs.twimg.com/media/Gyla7NnXMAAXSo_?format=jpg&name=large', alt: 'Social media image' }\n];\n\nconst DEFAULTS = {\n  maxVerticalRotationDeg: 5,\n  dragSensitivity: 20,\n  enlargeTransitionMs: 300,\n  segments: 35\n};\n\nconst clamp = (v, min, max) => Math.min(Math.max(v, min), max);\nconst normalizeAngle = d => ((d % 360) + 360) % 360;\nconst wrapAngleSigned = deg => {\n  const a = (((deg + 180) % 360) + 360) % 360;\n  return a - 180;\n};\nconst getDataNumber = (el, name, fallback) => {\n  const attr = el.dataset[name] ?? el.getAttribute(`data-${name}`);\n  const n = attr == null ? NaN : parseFloat(attr);\n  return Number.isFinite(n) ? n : fallback;\n};\n\nfunction buildItems(pool, seg) {\n  const xCols = Array.from({ length: seg }, (_, i) => -37 + i * 2);\n  const evenYs = [-4, -2, 0, 2, 4];\n  const oddYs = [-3, -1, 1, 3, 5];\n\n  const coords = xCols.flatMap((x, c) => {\n    const ys = c % 2 === 0 ? evenYs : oddYs;\n    return ys.map(y => ({ x, y, sizeX: 2, sizeY: 2 }));\n  });\n\n  const totalSlots = coords.length;\n  if (pool.length === 0) {\n    return coords.map(c => ({ ...c, src: '', alt: '' }));\n  }\n  if (pool.length > totalSlots) {\n    console.warn(\n      `[DomeGallery] Provided image count (${pool.length}) exceeds available tiles (${totalSlots}). Some images will not be shown.`\n    );\n  }\n\n  const normalizedImages = pool.map(image => {\n    if (typeof image === 'string') {\n      return { src: image, alt: '' };\n    }\n    return { src: image.src || '', alt: image.alt || '' };\n  });\n\n  const usedImages = Array.from({ length: totalSlots }, (_, i) => normalizedImages[i % normalizedImages.length]);\n\n  for (let i = 1; i < usedImages.length; i++) {\n    if (usedImages[i].src === usedImages[i - 1].src) {\n      for (let j = i + 1; j < usedImages.length; j++) {\n        if (usedImages[j].src !== usedImages[i].src) {\n          const tmp = usedImages[i];\n          usedImages[i] = usedImages[j];\n          usedImages[j] = tmp;\n          break;\n        }\n      }\n    }\n  }\n\n  return coords.map((c, i) => ({\n    ...c,\n    src: usedImages[i].src,\n    alt: usedImages[i].alt\n  }));\n}\n\nfunction computeItemBaseRotation(offsetX, offsetY, sizeX, sizeY, segments) {\n  const unit = 360 / segments / 2;\n  const rotateY = unit * (offsetX + (sizeX - 1) / 2);\n  const rotateX = unit * (offsetY - (sizeY - 1) / 2);\n  return { rotateX, rotateY };\n}\n\nexport default function DomeGallery({\n  images = DEFAULT_IMAGES,\n  fit = 0.5,\n  fitBasis = 'auto',\n  minRadius = 600,\n  maxRadius = Infinity,\n  padFactor = 0.25,\n  overlayBlurColor = '#060010',\n  maxVerticalRotationDeg = DEFAULTS.maxVerticalRotationDeg,\n  dragSensitivity = DEFAULTS.dragSensitivity,\n  enlargeTransitionMs = DEFAULTS.enlargeTransitionMs,\n  segments = DEFAULTS.segments,\n  dragDampening = 2,\n  openedImageWidth = '250px',\n  openedImageHeight = '350px',\n  imageBorderRadius = '30px',\n  openedImageBorderRadius = '30px',\n  grayscale = true\n}) {\n  const rootRef = useRef(null);\n  const mainRef = useRef(null);\n  const sphereRef = useRef(null);\n  const frameRef = useRef(null);\n  const viewerRef = useRef(null);\n  const scrimRef = useRef(null);\n  const focusedElRef = useRef(null);\n  const originalTilePositionRef = useRef(null);\n\n  const rotationRef = useRef({ x: 0, y: 0 });\n  const startRotRef = useRef({ x: 0, y: 0 });\n  const startPosRef = useRef(null);\n  const draggingRef = useRef(false);\n  const movedRef = useRef(false);\n  const inertiaRAF = useRef(null);\n  const openingRef = useRef(false);\n  const openStartedAtRef = useRef(0);\n  const lastDragEndAt = useRef(0);\n\n  const scrollLockedRef = useRef(false);\n  const lockScroll = useCallback(() => {\n    if (scrollLockedRef.current) return;\n    scrollLockedRef.current = true;\n    document.body.classList.add('dg-scroll-lock');\n  }, []);\n  const unlockScroll = useCallback(() => {\n    if (!scrollLockedRef.current) return;\n    if (rootRef.current?.getAttribute('data-enlarging') === 'true') return;\n    scrollLockedRef.current = false;\n    document.body.classList.remove('dg-scroll-lock');\n  }, []);\n\n  const items = useMemo(() => buildItems(images, segments), [images, segments]);\n\n  const applyTransform = (xDeg, yDeg) => {\n    const el = sphereRef.current;\n    if (el) {\n      el.style.transform = `translateZ(calc(var(--radius) * -1)) rotateX(${xDeg}deg) rotateY(${yDeg}deg)`;\n    }\n  };\n\n  const lockedRadiusRef = useRef(null);\n\n  useEffect(() => {\n    const root = rootRef.current;\n    if (!root) return;\n    const ro = new ResizeObserver(entries => {\n      const cr = entries[0].contentRect;\n      const w = Math.max(1, cr.width),\n        h = Math.max(1, cr.height);\n      const minDim = Math.min(w, h),\n        maxDim = Math.max(w, h),\n        aspect = w / h;\n      let basis;\n      switch (fitBasis) {\n        case 'min':\n          basis = minDim;\n          break;\n        case 'max':\n          basis = maxDim;\n          break;\n        case 'width':\n          basis = w;\n          break;\n        case 'height':\n          basis = h;\n          break;\n        default:\n          basis = aspect >= 1.3 ? w : minDim;\n      }\n      let radius = basis * fit;\n      const heightGuard = h * 1.35;\n      radius = Math.min(radius, heightGuard);\n      radius = clamp(radius, minRadius, maxRadius);\n      lockedRadiusRef.current = Math.round(radius);\n\n      const viewerPad = Math.max(8, Math.round(minDim * padFactor));\n      root.style.setProperty('--radius', `${lockedRadiusRef.current}px`);\n      root.style.setProperty('--viewer-pad', `${viewerPad}px`);\n      root.style.setProperty('--overlay-blur-color', overlayBlurColor);\n      root.style.setProperty('--tile-radius', imageBorderRadius);\n      root.style.setProperty('--enlarge-radius', openedImageBorderRadius);\n      root.style.setProperty('--image-filter', grayscale ? 'grayscale(1)' : 'none');\n      applyTransform(rotationRef.current.x, rotationRef.current.y);\n\n      const enlargedOverlay = viewerRef.current?.querySelector('.enlarge');\n      if (enlargedOverlay && frameRef.current && mainRef.current) {\n        const frameR = frameRef.current.getBoundingClientRect();\n        const mainR = mainRef.current.getBoundingClientRect();\n\n        const hasCustomSize = openedImageWidth && openedImageHeight;\n        if (hasCustomSize) {\n          const tempDiv = document.createElement('div');\n          tempDiv.style.cssText = `position: absolute; width: ${openedImageWidth}; height: ${openedImageHeight}; visibility: hidden;`;\n          document.body.appendChild(tempDiv);\n          const tempRect = tempDiv.getBoundingClientRect();\n          document.body.removeChild(tempDiv);\n\n          const centeredLeft = frameR.left - mainR.left + (frameR.width - tempRect.width) / 2;\n          const centeredTop = frameR.top - mainR.top + (frameR.height - tempRect.height) / 2;\n\n          enlargedOverlay.style.left = `${centeredLeft}px`;\n          enlargedOverlay.style.top = `${centeredTop}px`;\n        } else {\n          enlargedOverlay.style.left = `${frameR.left - mainR.left}px`;\n          enlargedOverlay.style.top = `${frameR.top - mainR.top}px`;\n          enlargedOverlay.style.width = `${frameR.width}px`;\n          enlargedOverlay.style.height = `${frameR.height}px`;\n        }\n      }\n    });\n    ro.observe(root);\n    return () => ro.disconnect();\n  }, [\n    fit,\n    fitBasis,\n    minRadius,\n    maxRadius,\n    padFactor,\n    overlayBlurColor,\n    grayscale,\n    imageBorderRadius,\n    openedImageBorderRadius,\n    openedImageWidth,\n    openedImageHeight\n  ]);\n\n  useEffect(() => {\n    applyTransform(rotationRef.current.x, rotationRef.current.y);\n  }, []);\n\n  const stopInertia = useCallback(() => {\n    if (inertiaRAF.current) {\n      cancelAnimationFrame(inertiaRAF.current);\n      inertiaRAF.current = null;\n    }\n  }, []);\n\n  const startInertia = useCallback(\n    (vx, vy) => {\n      const MAX_V = 1.4;\n      let vX = clamp(vx, -MAX_V, MAX_V) * 80;\n      let vY = clamp(vy, -MAX_V, MAX_V) * 80;\n      let frames = 0;\n      const d = clamp(dragDampening ?? 0.6, 0, 1);\n      const frictionMul = 0.94 + 0.055 * d;\n      const stopThreshold = 0.015 - 0.01 * d;\n      const maxFrames = Math.round(90 + 270 * d);\n      const step = () => {\n        vX *= frictionMul;\n        vY *= frictionMul;\n        if (Math.abs(vX) < stopThreshold && Math.abs(vY) < stopThreshold) {\n          inertiaRAF.current = null;\n          return;\n        }\n        if (++frames > maxFrames) {\n          inertiaRAF.current = null;\n          return;\n        }\n        const nextX = clamp(rotationRef.current.x - vY / 200, -maxVerticalRotationDeg, maxVerticalRotationDeg);\n        const nextY = wrapAngleSigned(rotationRef.current.y + vX / 200);\n        rotationRef.current = { x: nextX, y: nextY };\n        applyTransform(nextX, nextY);\n        inertiaRAF.current = requestAnimationFrame(step);\n      };\n      stopInertia();\n      inertiaRAF.current = requestAnimationFrame(step);\n    },\n    [dragDampening, maxVerticalRotationDeg, stopInertia]\n  );\n\n  useGesture(\n    {\n      onDragStart: ({ event }) => {\n        if (focusedElRef.current) return;\n        stopInertia();\n        const evt = event;\n        draggingRef.current = true;\n        movedRef.current = false;\n        startRotRef.current = { ...rotationRef.current };\n        startPosRef.current = { x: evt.clientX, y: evt.clientY };\n      },\n      onDrag: ({ event, last, velocity = [0, 0], direction = [0, 0], movement }) => {\n        if (focusedElRef.current || !draggingRef.current || !startPosRef.current) return;\n        const evt = event;\n        const dxTotal = evt.clientX - startPosRef.current.x;\n        const dyTotal = evt.clientY - startPosRef.current.y;\n        if (!movedRef.current) {\n          const dist2 = dxTotal * dxTotal + dyTotal * dyTotal;\n          if (dist2 > 16) movedRef.current = true;\n        }\n        const nextX = clamp(\n          startRotRef.current.x - dyTotal / dragSensitivity,\n          -maxVerticalRotationDeg,\n          maxVerticalRotationDeg\n        );\n        const nextY = wrapAngleSigned(startRotRef.current.y + dxTotal / dragSensitivity);\n        if (rotationRef.current.x !== nextX || rotationRef.current.y !== nextY) {\n          rotationRef.current = { x: nextX, y: nextY };\n          applyTransform(nextX, nextY);\n        }\n        if (last) {\n          draggingRef.current = false;\n          let [vMagX, vMagY] = velocity;\n          const [dirX, dirY] = direction;\n          let vx = vMagX * dirX;\n          let vy = vMagY * dirY;\n          if (Math.abs(vx) < 0.001 && Math.abs(vy) < 0.001 && Array.isArray(movement)) {\n            const [mx, my] = movement;\n            vx = clamp((mx / dragSensitivity) * 0.02, -1.2, 1.2);\n            vy = clamp((my / dragSensitivity) * 0.02, -1.2, 1.2);\n          }\n          if (Math.abs(vx) > 0.005 || Math.abs(vy) > 0.005) startInertia(vx, vy);\n          if (movedRef.current) lastDragEndAt.current = performance.now();\n          movedRef.current = false;\n        }\n      }\n    },\n    { target: mainRef, eventOptions: { passive: true } }\n  );\n\n  useEffect(() => {\n    const scrim = scrimRef.current;\n    if (!scrim) return;\n    const close = () => {\n      if (performance.now() - openStartedAtRef.current < 250) return;\n      const el = focusedElRef.current;\n      if (!el) return;\n      const parent = el.parentElement;\n      const overlay = viewerRef.current?.querySelector('.enlarge');\n      if (!overlay) return;\n      const refDiv = parent.querySelector('.item__image--reference');\n      const originalPos = originalTilePositionRef.current;\n      if (!originalPos) {\n        overlay.remove();\n        if (refDiv) refDiv.remove();\n        parent.style.setProperty('--rot-y-delta', '0deg');\n        parent.style.setProperty('--rot-x-delta', '0deg');\n        el.style.visibility = '';\n        el.style.zIndex = 0;\n        focusedElRef.current = null;\n        rootRef.current?.removeAttribute('data-enlarging');\n        openingRef.current = false;\n        unlockScroll();\n        return;\n      }\n      const currentRect = overlay.getBoundingClientRect();\n      const rootRect = rootRef.current.getBoundingClientRect();\n      const originalPosRelativeToRoot = {\n        left: originalPos.left - rootRect.left,\n        top: originalPos.top - rootRect.top,\n        width: originalPos.width,\n        height: originalPos.height\n      };\n      const overlayRelativeToRoot = {\n        left: currentRect.left - rootRect.left,\n        top: currentRect.top - rootRect.top,\n        width: currentRect.width,\n        height: currentRect.height\n      };\n      const animatingOverlay = document.createElement('div');\n      animatingOverlay.className = 'enlarge-closing';\n      animatingOverlay.style.cssText = `position:absolute;left:${overlayRelativeToRoot.left}px;top:${overlayRelativeToRoot.top}px;width:${overlayRelativeToRoot.width}px;height:${overlayRelativeToRoot.height}px;z-index:9999;border-radius: var(--enlarge-radius, 32px);overflow:hidden;box-shadow:0 10px 30px rgba(0,0,0,.35);transition:all ${enlargeTransitionMs}ms ease-out;pointer-events:none;margin:0;transform:none;`;\n      const originalImg = overlay.querySelector('img');\n      if (originalImg) {\n        const img = originalImg.cloneNode();\n        img.style.cssText = 'width:100%;height:100%;object-fit:cover;';\n        animatingOverlay.appendChild(img);\n      }\n      overlay.remove();\n      rootRef.current.appendChild(animatingOverlay);\n      void animatingOverlay.getBoundingClientRect();\n      requestAnimationFrame(() => {\n        animatingOverlay.style.left = originalPosRelativeToRoot.left + 'px';\n        animatingOverlay.style.top = originalPosRelativeToRoot.top + 'px';\n        animatingOverlay.style.width = originalPosRelativeToRoot.width + 'px';\n        animatingOverlay.style.height = originalPosRelativeToRoot.height + 'px';\n        animatingOverlay.style.opacity = '0';\n      });\n      const cleanup = () => {\n        animatingOverlay.remove();\n        originalTilePositionRef.current = null;\n        if (refDiv) refDiv.remove();\n        parent.style.transition = 'none';\n        el.style.transition = 'none';\n        parent.style.setProperty('--rot-y-delta', '0deg');\n        parent.style.setProperty('--rot-x-delta', '0deg');\n        requestAnimationFrame(() => {\n          el.style.visibility = '';\n          el.style.opacity = '0';\n          el.style.zIndex = 0;\n          focusedElRef.current = null;\n          rootRef.current?.removeAttribute('data-enlarging');\n          requestAnimationFrame(() => {\n            parent.style.transition = '';\n            el.style.transition = 'opacity 300ms ease-out';\n            requestAnimationFrame(() => {\n              el.style.opacity = '1';\n              setTimeout(() => {\n                el.style.transition = '';\n                el.style.opacity = '';\n                openingRef.current = false;\n                if (!draggingRef.current && rootRef.current?.getAttribute('data-enlarging') !== 'true')\n                  document.body.classList.remove('dg-scroll-lock');\n              }, 300);\n            });\n          });\n        });\n      };\n      animatingOverlay.addEventListener('transitionend', cleanup, { once: true });\n    };\n    scrim.addEventListener('click', close);\n    const onKey = e => {\n      if (e.key === 'Escape') close();\n    };\n    window.addEventListener('keydown', onKey);\n    return () => {\n      scrim.removeEventListener('click', close);\n      window.removeEventListener('keydown', onKey);\n    };\n  }, [enlargeTransitionMs, unlockScroll]);\n\n  const openItemFromElement = useCallback(\n    el => {\n      if (openingRef.current) return;\n      openingRef.current = true;\n      openStartedAtRef.current = performance.now();\n      lockScroll();\n      const parent = el.parentElement;\n      focusedElRef.current = el;\n      el.setAttribute('data-focused', 'true');\n      const offsetX = getDataNumber(parent, 'offsetX', 0);\n      const offsetY = getDataNumber(parent, 'offsetY', 0);\n      const sizeX = getDataNumber(parent, 'sizeX', 2);\n      const sizeY = getDataNumber(parent, 'sizeY', 2);\n      const parentRot = computeItemBaseRotation(offsetX, offsetY, sizeX, sizeY, segments);\n      const parentY = normalizeAngle(parentRot.rotateY);\n      const globalY = normalizeAngle(rotationRef.current.y);\n      let rotY = -(parentY + globalY) % 360;\n      if (rotY < -180) rotY += 360;\n      const rotX = -parentRot.rotateX - rotationRef.current.x;\n      parent.style.setProperty('--rot-y-delta', `${rotY}deg`);\n      parent.style.setProperty('--rot-x-delta', `${rotX}deg`);\n      const refDiv = document.createElement('div');\n      refDiv.className = 'item__image item__image--reference';\n      refDiv.style.opacity = '0';\n      refDiv.style.transform = `rotateX(${-parentRot.rotateX}deg) rotateY(${-parentRot.rotateY}deg)`;\n      parent.appendChild(refDiv);\n      const tileR = refDiv.getBoundingClientRect();\n      const mainR = mainRef.current.getBoundingClientRect();\n      const frameR = frameRef.current.getBoundingClientRect();\n      originalTilePositionRef.current = { left: tileR.left, top: tileR.top, width: tileR.width, height: tileR.height };\n      el.style.visibility = 'hidden';\n      el.style.zIndex = 0;\n      const overlay = document.createElement('div');\n      overlay.className = 'enlarge';\n      overlay.style.position = 'absolute';\n      overlay.style.left = frameR.left - mainR.left + 'px';\n      overlay.style.top = frameR.top - mainR.top + 'px';\n      overlay.style.width = frameR.width + 'px';\n      overlay.style.height = frameR.height + 'px';\n      overlay.style.opacity = '0';\n      overlay.style.zIndex = '30';\n      overlay.style.willChange = 'transform, opacity';\n      overlay.style.transformOrigin = 'top left';\n      overlay.style.transition = `transform ${enlargeTransitionMs}ms ease, opacity ${enlargeTransitionMs}ms ease`;\n      const rawSrc = parent.dataset.src || el.querySelector('img')?.src || '';\n      const img = document.createElement('img');\n      img.src = rawSrc;\n      overlay.appendChild(img);\n      viewerRef.current.appendChild(overlay);\n      const tx0 = tileR.left - frameR.left;\n      const ty0 = tileR.top - frameR.top;\n      const sx0 = tileR.width / frameR.width;\n      const sy0 = tileR.height / frameR.height;\n      overlay.style.transform = `translate(${tx0}px, ${ty0}px) scale(${sx0}, ${sy0})`;\n      requestAnimationFrame(() => {\n        overlay.style.opacity = '1';\n        overlay.style.transform = 'translate(0px, 0px) scale(1,1)';\n        rootRef.current?.setAttribute('data-enlarging', 'true');\n      });\n      const wantsResize = openedImageWidth || openedImageHeight;\n      if (wantsResize) {\n        const onFirstEnd = ev => {\n          if (ev.propertyName !== 'transform') return;\n          overlay.removeEventListener('transitionend', onFirstEnd);\n          const prevTransition = overlay.style.transition;\n          overlay.style.transition = 'none';\n          const tempWidth = openedImageWidth || `${frameR.width}px`;\n          const tempHeight = openedImageHeight || `${frameR.height}px`;\n          overlay.style.width = tempWidth;\n          overlay.style.height = tempHeight;\n          const newRect = overlay.getBoundingClientRect();\n          overlay.style.width = frameR.width + 'px';\n          overlay.style.height = frameR.height + 'px';\n          void overlay.offsetWidth;\n          overlay.style.transition = `left ${enlargeTransitionMs}ms ease, top ${enlargeTransitionMs}ms ease, width ${enlargeTransitionMs}ms ease, height ${enlargeTransitionMs}ms ease`;\n          const centeredLeft = frameR.left - mainR.left + (frameR.width - newRect.width) / 2;\n          const centeredTop = frameR.top - mainR.top + (frameR.height - newRect.height) / 2;\n          requestAnimationFrame(() => {\n            overlay.style.left = `${centeredLeft}px`;\n            overlay.style.top = `${centeredTop}px`;\n            overlay.style.width = tempWidth;\n            overlay.style.height = tempHeight;\n          });\n          const cleanupSecond = () => {\n            overlay.removeEventListener('transitionend', cleanupSecond);\n            overlay.style.transition = prevTransition;\n          };\n          overlay.addEventListener('transitionend', cleanupSecond, { once: true });\n        };\n        overlay.addEventListener('transitionend', onFirstEnd);\n      }\n    },\n    [enlargeTransitionMs, lockScroll, openedImageHeight, openedImageWidth, segments]\n  );\n\n  const onTileClick = useCallback(\n    e => {\n      if (draggingRef.current) return;\n      if (performance.now() - lastDragEndAt.current < 80) return;\n      if (openingRef.current) return;\n      openItemFromElement(e.currentTarget);\n    },\n    [openItemFromElement]\n  );\n\n  const onTilePointerUp = useCallback(\n    e => {\n      if (e.pointerType !== 'touch') return;\n      if (draggingRef.current) return;\n      if (performance.now() - lastDragEndAt.current < 80) return;\n      if (openingRef.current) return;\n      openItemFromElement(e.currentTarget);\n    },\n    [openItemFromElement]\n  );\n\n  const onTileTouchEnd = useCallback(\n    e => {\n      if (draggingRef.current) return;\n      if (performance.now() - lastDragEndAt.current < 80) return;\n      if (openingRef.current) return;\n      openItemFromElement(e.currentTarget);\n    },\n    [openItemFromElement]\n  );\n\n  useEffect(() => {\n    return () => {\n      document.body.classList.remove('dg-scroll-lock');\n    };\n  }, []);\n\n  return (\n    <div\n      ref={rootRef}\n      className=\"sphere-root\"\n      style={{\n        ['--segments-x']: segments,\n        ['--segments-y']: segments,\n        ['--overlay-blur-color']: overlayBlurColor,\n        ['--tile-radius']: imageBorderRadius,\n        ['--enlarge-radius']: openedImageBorderRadius,\n        ['--image-filter']: grayscale ? 'grayscale(1)' : 'none'\n      }}\n    >\n      <main ref={mainRef} className=\"sphere-main\">\n        <div className=\"stage\">\n          <div ref={sphereRef} className=\"sphere\">\n            {items.map((it, i) => (\n              <div\n                key={`${it.x},${it.y},${i}`}\n                className=\"item\"\n                data-src={it.src}\n                data-offset-x={it.x}\n                data-offset-y={it.y}\n                data-size-x={it.sizeX}\n                data-size-y={it.sizeY}\n                style={{\n                  ['--offset-x']: it.x,\n                  ['--offset-y']: it.y,\n                  ['--item-size-x']: it.sizeX,\n                  ['--item-size-y']: it.sizeY\n                }}\n              >\n                <div\n                  className=\"item__image\"\n                  role=\"button\"\n                  tabIndex={0}\n                  aria-label={it.alt || 'Open image'}\n                  onClick={onTileClick}\n                  onPointerUp={onTilePointerUp}\n                  onTouchEnd={onTileTouchEnd}\n                >\n                  <img src={it.src} draggable={false} alt={it.alt} />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"overlay\" />\n        <div className=\"overlay overlay--blur\" />\n        <div className=\"edge-fade edge-fade--top\" />\n        <div className=\"edge-fade edge-fade--bottom\" />\n\n        <div className=\"viewer\" ref={viewerRef}>\n          <div ref={scrimRef} className=\"scrim\" />\n          <div ref={frameRef} className=\"frame\" />\n        </div>\n      </main>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Components/DomeGallery/DomeGallery.css",
      "content": ".sphere-root {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  --radius: 520px;\n  --viewer-pad: 72px;\n  --circ: calc(var(--radius) * 3.14);\n  --rot-y: calc((360deg / var(--segments-x)) / 2);\n  --rot-x: calc((360deg / var(--segments-y)) / 2);\n  --item-width: calc(var(--circ) / var(--segments-x));\n  --item-height: calc(var(--circ) / var(--segments-y));\n}\n\n.sphere-root * {\n  box-sizing: border-box;\n}\n\n.sphere,\n.item,\n.item__image {\n  transform-style: preserve-3d;\n}\n\nmain.sphere-main {\n  position: absolute;\n  inset: 0;\n  display: grid;\n  place-items: center;\n  overflow: hidden;\n  touch-action: none;\n  user-select: none;\n  -webkit-user-select: none;\n  background: transparent;\n}\n\n.stage {\n  width: 100%;\n  height: 100%;\n  display: grid;\n  place-items: center;\n  perspective: calc(var(--radius) * 2);\n  perspective-origin: 50% 50%;\n  contain: layout paint size;\n}\n\n.sphere {\n  transform: translateZ(calc(var(--radius) * -1));\n  will-change: transform;\n}\n\n.overlay,\n.overlay--blur {\n  position: absolute;\n  inset: 0;\n  margin: auto;\n  z-index: 3;\n  pointer-events: none;\n}\n\n.overlay {\n  background-image: radial-gradient(rgba(235, 235, 235, 0) 65%, var(--overlay-blur-color, #060010) 100%);\n}\n\n.overlay--blur {\n  -webkit-mask-image: radial-gradient(rgba(235, 235, 235, 0) 70%, var(--overlay-blur-color, #060010) 90%);\n  mask-image: radial-gradient(rgba(235, 235, 235, 0) 70%, var(--overlay-blur-color, #060010) 90%);\n  backdrop-filter: blur(3px);\n}\n\n.item {\n  width: calc(var(--item-width) * var(--item-size-x));\n  height: calc(var(--item-height) * var(--item-size-y));\n  position: absolute;\n  top: -999px;\n  bottom: -999px;\n  left: -999px;\n  right: -999px;\n  margin: auto;\n  transform-origin: 50% 50%;\n  backface-visibility: hidden;\n  transition: transform 300ms;\n  transform: rotateY(calc(var(--rot-y) * (var(--offset-x) + ((var(--item-size-x) - 1) / 2)) + var(--rot-y-delta, 0deg)))\n    rotateX(calc(var(--rot-x) * (var(--offset-y) - ((var(--item-size-y) - 1) / 2)) + var(--rot-x-delta, 0deg)))\n    translateZ(var(--radius));\n}\n\n.item__image {\n  position: absolute;\n  display: block;\n  inset: 10px;\n  border-radius: var(--tile-radius, 12px);\n  background: transparent;\n  overflow: hidden;\n  backface-visibility: hidden;\n  transition: transform 300ms;\n  cursor: pointer;\n  -webkit-tap-highlight-color: transparent;\n  touch-action: manipulation;\n  pointer-events: auto;\n  -webkit-transform: translateZ(0);\n  transform: translateZ(0);\n}\n\n.item__image:focus {\n  outline: none;\n}\n\n.item__image img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  pointer-events: none;\n  backface-visibility: hidden;\n  filter: var(--image-filter, none);\n}\n\n.viewer {\n  position: absolute;\n  inset: 0;\n  z-index: 20;\n  pointer-events: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: var(--viewer-pad);\n}\n\n.viewer .frame {\n  height: 100%;\n  aspect-ratio: 1;\n  border-radius: var(--enlarge-radius, 32px);\n  display: flex;\n}\n\n@media (max-aspect-ratio: 1/1) {\n  .viewer .frame {\n    height: auto;\n    width: 100%;\n  }\n}\n\n.viewer .scrim {\n  position: absolute;\n  inset: 0;\n  z-index: 10;\n  background: rgba(0, 0, 0, 0.4);\n  pointer-events: none;\n  opacity: 0;\n  transition: opacity 500ms ease;\n  backdrop-filter: blur(3px);\n}\n\n.sphere-root[data-enlarging='true'] .viewer .scrim {\n  opacity: 1;\n  pointer-events: all;\n}\n\n.viewer .enlarge {\n  position: absolute;\n  z-index: 30;\n  border-radius: var(--enlarge-radius, 32px);\n  overflow: hidden;\n  transition:\n    transform 500ms ease,\n    opacity 500ms ease;\n  transform-origin: top left;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.35);\n}\n\n.viewer .enlarge img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  filter: var(--image-filter, none);\n}\n\n.sphere-root .enlarge-closing img {\n  filter: var(--image-filter, none);\n}\n\n.edge-fade {\n  position: absolute;\n  left: 0;\n  right: 0;\n  height: 120px;\n  z-index: 5;\n  pointer-events: none;\n  background: linear-gradient(to bottom, transparent, var(--overlay-blur-color, #060010));\n}\n\n.edge-fade--top {\n  top: 0;\n  transform: rotate(180deg);\n}\n\n.edge-fade--bottom {\n  bottom: 0;\n}\n",
      "type": "registry:item"
    }
  ]
}
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Carousel-JS-TW",
  "type": "registry:block",
  "title": "Carousel",
  "description": "Responsive carousel with touch gestures, looping and transitions.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Components/Carousel/Carousel.jsx",
      "content": "import { useEffect, useState, useRef } from 'react';\nimport { motion, useMotionValue, useTransform } from 'motion/react';\n// replace icons with your own if needed\nimport { FiCircle, FiCode, FiFileText, FiLayers, FiLayout } from 'react-icons/fi';\n\nconst DEFAULT_ITEMS = [\n  {\n    title: 'Text Animations',\n    description: 'Cool text animations for your projects.',\n    id: 1,\n    icon: <FiFileText className=\"h-[16px] w-[16px] text-white\" />\n  },\n  {\n    title: 'Animations',\n    description: 'Smooth animations for your projects.',\n    id: 2,\n    icon: <FiCircle className=\"h-[16px] w-[16px] text-white\" />\n  },\n  {\n    title: 'Components',\n    description: 'Reusable components for your projects.',\n    id: 3,\n    icon: <FiLayers className=\"h-[16px] w-[16px] text-white\" />\n  },\n  {\n    title: 'Backgrounds',\n    description: 'Beautiful backgrounds and patterns for your projects.',\n    id: 4,\n    icon: <FiLayout className=\"h-[16px] w-[16px] text-white\" />\n  },\n  {\n    title: 'Common UI',\n    description: 'Common UI components are coming soon!',\n    id: 5,\n    icon: <FiCode className=\"h-[16px] w-[16px] text-white\" />\n  }\n];\n\nconst DRAG_BUFFER = 0;\nconst VELOCITY_THRESHOLD = 500;\nconst GAP = 16;\nconst SPRING_OPTIONS = { type: 'spring', stiffness: 300, damping: 30 };\n\nexport default function Carousel({\n  items = DEFAULT_ITEMS,\n  baseWidth = 300,\n  autoplay = false,\n  autoplayDelay = 3000,\n  pauseOnHover = false,\n  loop = false,\n  round = false\n}) {\n  const containerPadding = 16;\n  const itemWidth = baseWidth - containerPadding * 2;\n  const trackItemOffset = itemWidth + GAP;\n\n  const carouselItems = loop ? [...items, items[0]] : items;\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const x = useMotionValue(0);\n  const [isHovered, setIsHovered] = useState(false);\n  const [isResetting, setIsResetting] = useState(false);\n\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (pauseOnHover && containerRef.current) {\n      const container = containerRef.current;\n      const handleMouseEnter = () => setIsHovered(true);\n      const handleMouseLeave = () => setIsHovered(false);\n      container.addEventListener('mouseenter', handleMouseEnter);\n      container.addEventListener('mouseleave', handleMouseLeave);\n      return () => {\n        container.removeEventListener('mouseenter', handleMouseEnter);\n        container.removeEventListener('mouseleave', handleMouseLeave);\n      };\n    }\n  }, [pauseOnHover]);\n\n  useEffect(() => {\n    if (autoplay && (!pauseOnHover || !isHovered)) {\n      const timer = setInterval(() => {\n        setCurrentIndex(prev => {\n          if (prev === items.length - 1 && loop) {\n            return prev + 1;\n          }\n          if (prev === carouselItems.length - 1) {\n            return loop ? 0 : prev;\n          }\n          return prev + 1;\n        });\n      }, autoplayDelay);\n      return () => clearInterval(timer);\n    }\n  }, [autoplay, autoplayDelay, isHovered, loop, items.length, carouselItems.length, pauseOnHover]);\n\n  const effectiveTransition = isResetting ? { duration: 0 } : SPRING_OPTIONS;\n\n  const handleAnimationComplete = () => {\n    if (loop && currentIndex === carouselItems.length - 1) {\n      setIsResetting(true);\n      x.set(0);\n      setCurrentIndex(0);\n      setTimeout(() => setIsResetting(false), 50);\n    }\n  };\n\n  const handleDragEnd = (_, info) => {\n    const offset = info.offset.x;\n    const velocity = info.velocity.x;\n    if (offset < -DRAG_BUFFER || velocity < -VELOCITY_THRESHOLD) {\n      if (loop && currentIndex === items.length - 1) {\n        setCurrentIndex(currentIndex + 1);\n      } else {\n        setCurrentIndex(prev => Math.min(prev + 1, carouselItems.length - 1));\n      }\n    } else if (offset > DRAG_BUFFER || velocity > VELOCITY_THRESHOLD) {\n      if (loop && currentIndex === 0) {\n        setCurrentIndex(items.length - 1);\n      } else {\n        setCurrentIndex(prev => Math.max(prev - 1, 0));\n      }\n    }\n  };\n\n  const dragProps = loop\n    ? {}\n    : {\n        dragConstraints: {\n          left: -trackItemOffset * (carouselItems.length - 1),\n          right: 0\n        }\n      };\n\n  return (\n    <div\n      ref={containerRef}\n      className={`relative overflow-hidden p-4 ${\n        round ? 'rounded-full border border-white' : 'rounded-[24px] border border-[#222]'\n      }`}\n      style={{\n        width: `${baseWidth}px`,\n        ...(round && { height: `${baseWidth}px` })\n      }}\n    >\n      <motion.div\n        className=\"flex\"\n        drag=\"x\"\n        {...dragProps}\n        style={{\n          width: itemWidth,\n          gap: `${GAP}px`,\n          perspective: 1000,\n          perspectiveOrigin: `${currentIndex * trackItemOffset + itemWidth / 2}px 50%`,\n          x\n        }}\n        onDragEnd={handleDragEnd}\n        animate={{ x: -(currentIndex * trackItemOffset) }}\n        transition={effectiveTransition}\n        onAnimationComplete={handleAnimationComplete}\n      >\n        {carouselItems.map((item, index) => {\n          const range = [-(index + 1) * trackItemOffset, -index * trackItemOffset, -(index - 1) * trackItemOffset];\n          const outputRange = [90, 0, -90];\n          // eslint-disable-next-line react-hooks/rules-of-hooks\n          const rotateY = useTransform(x, range, outputRange, { clamp: false });\n          return (\n            <motion.div\n              key={index}\n              className={`relative shrink-0 flex flex-col ${\n                round\n                  ? 'items-center justify-center text-center bg-[#060010] border-0'\n                  : 'items-start justify-between bg-[#222] border border-[#222] rounded-[12px]'\n              } overflow-hidden cursor-grab active:cursor-grabbing`}\n              style={{\n                width: itemWidth,\n                height: round ? itemWidth : '100%',\n                rotateY: rotateY,\n                ...(round && { borderRadius: '50%' })\n              }}\n              transition={effectiveTransition}\n            >\n              <div className={`${round ? 'p-0 m-0' : 'mb-4 p-5'}`}>\n                <span className=\"flex h-[28px] w-[28px] items-center justify-center rounded-full bg-[#060010]\">\n                  {item.icon}\n                </span>\n              </div>\n              <div className=\"p-5\">\n                <div className=\"mb-1 font-black text-lg text-white\">{item.title}</div>\n                <p className=\"text-sm text-white\">{item.description}</p>\n              </div>\n            </motion.div>\n          );\n        })}\n      </motion.div>\n      <div className={`flex w-full justify-center ${round ? 'absolute z-20 bottom-12 left-1/2 -translate-x-1/2' : ''}`}>\n        <div className=\"mt-4 flex w-[150px] justify-between px-8\">\n          {items.map((_, index) => (\n            <motion.div\n              key={index}\n              className={`h-2 w-2 rounded-full cursor-pointer transition-colors duration-150 ${\n                currentIndex % items.length === index\n                  ? round\n                    ? 'bg-white'\n                    : 'bg-[#333333]'\n                  : round\n                    ? 'bg-[#555]'\n                    : 'bg-[rgba(51,51,51,0.4)]'\n              }`}\n              animate={{\n                scale: currentIndex % items.length === index ? 1.2 : 1\n              }}\n              onClick={() => setCurrentIndex(index)}\n              transition={{ duration: 0.15 }}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}
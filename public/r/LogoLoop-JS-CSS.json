{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "LogoLoop-JS-CSS",
  "type": "registry:block",
  "title": "LogoLoop",
  "description": "Continuously looping marquee of brand or tech logos with seamless repeat and hover pause.",
  "files": [
    {
      "path": "public/default/src/content/Animations/LogoLoop/LogoLoop.jsx",
      "content": "import { useCallback, useEffect, useMemo, useRef, useState, memo } from 'react';\nimport './LogoLoop.css';\n\nconst ANIMATION_CONFIG = {\n  SMOOTH_TAU: 0.25,\n  MIN_COPIES: 2,\n  COPY_HEADROOM: 2\n};\n\nconst toCssLength = value => (typeof value === 'number' ? `${value}px` : (value ?? undefined));\n\nconst useResizeObserver = (callback, elements, dependencies) => {\n  useEffect(() => {\n    if (!window.ResizeObserver) {\n      const handleResize = () => callback();\n      window.addEventListener('resize', handleResize);\n      callback();\n      return () => window.removeEventListener('resize', handleResize);\n    }\n\n    const observers = elements.map(ref => {\n      if (!ref.current) return null;\n      const observer = new ResizeObserver(callback);\n      observer.observe(ref.current);\n      return observer;\n    });\n\n    callback();\n\n    return () => {\n      observers.forEach(observer => observer?.disconnect());\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n};\n\nconst useImageLoader = (seqRef, onLoad, dependencies) => {\n  useEffect(() => {\n    const images = seqRef.current?.querySelectorAll('img') ?? [];\n\n    if (images.length === 0) {\n      onLoad();\n      return;\n    }\n\n    let remainingImages = images.length;\n    const handleImageLoad = () => {\n      remainingImages -= 1;\n      if (remainingImages === 0) {\n        onLoad();\n      }\n    };\n\n    images.forEach(img => {\n      const htmlImg = img;\n      if (htmlImg.complete) {\n        handleImageLoad();\n      } else {\n        htmlImg.addEventListener('load', handleImageLoad, { once: true });\n        htmlImg.addEventListener('error', handleImageLoad, { once: true });\n      }\n    });\n\n    return () => {\n      images.forEach(img => {\n        img.removeEventListener('load', handleImageLoad);\n        img.removeEventListener('error', handleImageLoad);\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n};\n\nconst useAnimationLoop = (trackRef, targetVelocity, seqWidth, isHovered, pauseOnHover) => {\n  const rafRef = useRef(null);\n  const lastTimestampRef = useRef(null);\n  const offsetRef = useRef(0);\n  const velocityRef = useRef(0);\n\n  useEffect(() => {\n    const track = trackRef.current;\n    if (!track) return;\n\n    if (seqWidth > 0) {\n      offsetRef.current = ((offsetRef.current % seqWidth) + seqWidth) % seqWidth;\n      track.style.transform = `translate3d(${-offsetRef.current}px, 0, 0)`;\n    }\n\n    const animate = timestamp => {\n      if (lastTimestampRef.current === null) {\n        lastTimestampRef.current = timestamp;\n      }\n\n      const deltaTime = Math.max(0, timestamp - lastTimestampRef.current) / 1000;\n      lastTimestampRef.current = timestamp;\n\n      const target = pauseOnHover && isHovered ? 0 : targetVelocity;\n\n      const easingFactor = 1 - Math.exp(-deltaTime / ANIMATION_CONFIG.SMOOTH_TAU);\n      velocityRef.current += (target - velocityRef.current) * easingFactor;\n\n      if (seqWidth > 0) {\n        let nextOffset = offsetRef.current + velocityRef.current * deltaTime;\n        nextOffset = ((nextOffset % seqWidth) + seqWidth) % seqWidth;\n        offsetRef.current = nextOffset;\n\n        const translateX = -offsetRef.current;\n        track.style.transform = `translate3d(${translateX}px, 0, 0)`;\n      }\n\n      rafRef.current = requestAnimationFrame(animate);\n    };\n\n    rafRef.current = requestAnimationFrame(animate);\n\n    return () => {\n      if (rafRef.current !== null) {\n        cancelAnimationFrame(rafRef.current);\n        rafRef.current = null;\n      }\n      lastTimestampRef.current = null;\n    };\n  }, [targetVelocity, seqWidth, isHovered, pauseOnHover, trackRef]);\n};\n\nexport const LogoLoop = memo(\n  ({\n    logos,\n    speed = 120,\n    direction = 'left',\n    width = '100%',\n    logoHeight = 28,\n    gap = 32,\n    pauseOnHover = true,\n    fadeOut = false,\n    fadeOutColor,\n    scaleOnHover = false,\n    ariaLabel = 'Partner logos',\n    className,\n    style\n  }) => {\n    const containerRef = useRef(null);\n    const trackRef = useRef(null);\n    const seqRef = useRef(null);\n\n    const [seqWidth, setSeqWidth] = useState(0);\n    const [copyCount, setCopyCount] = useState(ANIMATION_CONFIG.MIN_COPIES);\n    const [isHovered, setIsHovered] = useState(false);\n\n    const targetVelocity = useMemo(() => {\n      const magnitude = Math.abs(speed);\n      const directionMultiplier = direction === 'left' ? 1 : -1;\n      const speedMultiplier = speed < 0 ? -1 : 1;\n      return magnitude * directionMultiplier * speedMultiplier;\n    }, [speed, direction]);\n\n    const updateDimensions = useCallback(() => {\n      const containerWidth = containerRef.current?.clientWidth ?? 0;\n      const sequenceWidth = seqRef.current?.getBoundingClientRect?.()?.width ?? 0;\n\n      if (sequenceWidth > 0) {\n        setSeqWidth(Math.ceil(sequenceWidth));\n        const copiesNeeded = Math.ceil(containerWidth / sequenceWidth) + ANIMATION_CONFIG.COPY_HEADROOM;\n        setCopyCount(Math.max(ANIMATION_CONFIG.MIN_COPIES, copiesNeeded));\n      }\n    }, []);\n\n    useResizeObserver(updateDimensions, [containerRef, seqRef], [logos, gap, logoHeight]);\n\n    useImageLoader(seqRef, updateDimensions, [logos, gap, logoHeight]);\n\n    useAnimationLoop(trackRef, targetVelocity, seqWidth, isHovered, pauseOnHover);\n\n    const cssVariables = useMemo(\n      () => ({\n        '--logoloop-gap': `${gap}px`,\n        '--logoloop-logoHeight': `${logoHeight}px`,\n        ...(fadeOutColor && { '--logoloop-fadeColor': fadeOutColor })\n      }),\n      [gap, logoHeight, fadeOutColor]\n    );\n\n    const rootClassName = useMemo(\n      () =>\n        ['logoloop', fadeOut && 'logoloop--fade', scaleOnHover && 'logoloop--scale-hover', className]\n          .filter(Boolean)\n          .join(' '),\n      [fadeOut, scaleOnHover, className]\n    );\n\n    const handleMouseEnter = useCallback(() => {\n      if (pauseOnHover) setIsHovered(true);\n    }, [pauseOnHover]);\n\n    const handleMouseLeave = useCallback(() => {\n      if (pauseOnHover) setIsHovered(false);\n    }, [pauseOnHover]);\n\n    const renderLogoItem = useCallback((item, key) => {\n      const isNodeItem = 'node' in item;\n\n      const content = isNodeItem ? (\n        <span className=\"logoloop__node\" aria-hidden={!!item.href && !item.ariaLabel}>\n          {item.node}\n        </span>\n      ) : (\n        <img\n          src={item.src}\n          srcSet={item.srcSet}\n          sizes={item.sizes}\n          width={item.width}\n          height={item.height}\n          alt={item.alt ?? ''}\n          title={item.title}\n          loading=\"lazy\"\n          decoding=\"async\"\n          draggable={false}\n        />\n      );\n\n      const itemAriaLabel = isNodeItem ? (item.ariaLabel ?? item.title) : (item.alt ?? item.title);\n\n      const itemContent = item.href ? (\n        <a\n          className=\"logoloop__link\"\n          href={item.href}\n          aria-label={itemAriaLabel || 'logo link'}\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          {content}\n        </a>\n      ) : (\n        content\n      );\n\n      return (\n        <li className=\"logoloop__item\" key={key} role=\"listitem\">\n          {itemContent}\n        </li>\n      );\n    }, []);\n\n    const logoLists = useMemo(\n      () =>\n        Array.from({ length: copyCount }, (_, copyIndex) => (\n          <ul\n            className=\"logoloop__list\"\n            key={`copy-${copyIndex}`}\n            role=\"list\"\n            aria-hidden={copyIndex > 0}\n            ref={copyIndex === 0 ? seqRef : undefined}\n          >\n            {logos.map((item, itemIndex) => renderLogoItem(item, `${copyIndex}-${itemIndex}`))}\n          </ul>\n        )),\n      [copyCount, logos, renderLogoItem]\n    );\n\n    const containerStyle = useMemo(\n      () => ({\n        width: toCssLength(width) ?? '100%',\n        ...cssVariables,\n        ...style\n      }),\n      [width, cssVariables, style]\n    );\n\n    return (\n      <div\n        ref={containerRef}\n        className={rootClassName}\n        style={containerStyle}\n        role=\"region\"\n        aria-label={ariaLabel}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        <div className=\"logoloop__track\" ref={trackRef}>\n          {logoLists}\n        </div>\n      </div>\n    );\n  }\n);\n\nLogoLoop.displayName = 'LogoLoop';\n\nexport default LogoLoop;\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Animations/LogoLoop/LogoLoop.css",
      "content": ".logoloop {\n  position: relative;\n  overflow-x: hidden;\n\n  --logoloop-gap: 32px;\n  --logoloop-logoHeight: 28px;\n  --logoloop-fadeColorAuto: #ffffff;\n}\n\n.logoloop--scale-hover {\n  padding-top: calc(var(--logoloop-logoHeight) * 0.1);\n  padding-bottom: calc(var(--logoloop-logoHeight) * 0.1);\n}\n\n@media (prefers-color-scheme: dark) {\n  .logoloop {\n    --logoloop-fadeColorAuto: #0b0b0b;\n  }\n}\n\n.logoloop__track {\n  display: flex;\n  width: max-content;\n  will-change: transform;\n  user-select: none;\n}\n\n.logoloop__list {\n  display: flex;\n  align-items: center;\n}\n\n.logoloop__item {\n  flex: 0 0 auto;\n  margin-right: var(--logoloop-gap);\n  font-size: var(--logoloop-logoHeight);\n  line-height: 1;\n}\n\n.logoloop__item:last-child {\n  margin-right: var(--logoloop-gap);\n}\n\n.logoloop__node {\n  display: inline-flex;\n  align-items: center;\n}\n\n.logoloop__item img {\n  height: var(--logoloop-logoHeight);\n  width: auto;\n  display: block;\n  object-fit: contain;\n  image-rendering: -webkit-optimize-contrast;\n  -webkit-user-drag: none;\n  pointer-events: none;\n  /* Links handle interaction */\n  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.logoloop--scale-hover .logoloop__item {\n  overflow: visible;\n}\n\n.logoloop--scale-hover .logoloop__item:hover img,\n.logoloop--scale-hover .logoloop__item:hover .logoloop__node {\n  transform: scale(1.2);\n  transform-origin: center center;\n}\n\n.logoloop--scale-hover .logoloop__node {\n  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.logoloop__link {\n  display: inline-flex;\n  align-items: center;\n  text-decoration: none;\n  border-radius: 4px;\n  transition: opacity 0.2s ease;\n}\n\n.logoloop__link:hover {\n  opacity: 0.8;\n}\n\n.logoloop__link:focus-visible {\n  outline: 2px solid currentColor;\n  outline-offset: 2px;\n}\n\n.logoloop--fade::before,\n.logoloop--fade::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: clamp(24px, 8%, 120px);\n  pointer-events: none;\n  z-index: 1;\n}\n\n.logoloop--fade::before {\n  left: 0;\n  background: linear-gradient(\n    to right,\n    var(--logoloop-fadeColor, var(--logoloop-fadeColorAuto)) 0%,\n    rgba(0, 0, 0, 0) 100%\n  );\n}\n\n.logoloop--fade::after {\n  right: 0;\n  background: linear-gradient(\n    to left,\n    var(--logoloop-fadeColor, var(--logoloop-fadeColorAuto)) 0%,\n    rgba(0, 0, 0, 0) 100%\n  );\n}\n\n@media (prefers-reduced-motion: reduce) {\n  .logoloop__track {\n    transform: translate3d(0, 0, 0) !important;\n  }\n\n  .logoloop__item img,\n  .logoloop__node {\n    transition: none !important;\n  }\n}\n",
      "type": "registry:item"
    }
  ]
}
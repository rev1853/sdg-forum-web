{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Carousel-TS-CSS",
  "type": "registry:block",
  "title": "Carousel",
  "description": "Responsive carousel with touch gestures, looping and transitions.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "public/ts/default/src/ts-default/Components/Carousel/Carousel.tsx",
      "content": "import { useEffect, useState, useRef } from 'react';\nimport { motion, PanInfo, useMotionValue, useTransform } from 'motion/react';\n// replace icons with your own if needed\nimport { FiCircle, FiCode, FiFileText, FiLayers, FiLayout } from 'react-icons/fi';\nimport './Carousel.css';\n\nexport interface CarouselItem {\n  title: string;\n  description: string;\n  id: number;\n  icon: React.ReactElement;\n}\n\nexport interface CarouselProps {\n  items?: CarouselItem[];\n  baseWidth?: number;\n  autoplay?: boolean;\n  autoplayDelay?: number;\n  pauseOnHover?: boolean;\n  loop?: boolean;\n  round?: boolean;\n}\n\nconst DEFAULT_ITEMS: CarouselItem[] = [\n  {\n    title: 'Text Animations',\n    description: 'Cool text animations for your projects.',\n    id: 1,\n    icon: <FiFileText className=\"carousel-icon\" />\n  },\n  {\n    title: 'Animations',\n    description: 'Smooth animations for your projects.',\n    id: 2,\n    icon: <FiCircle className=\"carousel-icon\" />\n  },\n  {\n    title: 'Components',\n    description: 'Reusable components for your projects.',\n    id: 3,\n    icon: <FiLayers className=\"carousel-icon\" />\n  },\n  {\n    title: 'Backgrounds',\n    description: 'Beautiful backgrounds and patterns for your projects.',\n    id: 4,\n    icon: <FiLayout className=\"carousel-icon\" />\n  },\n  {\n    title: 'Common UI',\n    description: 'Common UI components are coming soon!',\n    id: 5,\n    icon: <FiCode className=\"carousel-icon\" />\n  }\n];\n\nconst DRAG_BUFFER = 0;\nconst VELOCITY_THRESHOLD = 500;\nconst GAP = 16;\nconst SPRING_OPTIONS = { type: 'spring', stiffness: 300, damping: 30 };\n\nexport default function Carousel({\n  items = DEFAULT_ITEMS,\n  baseWidth = 300,\n  autoplay = false,\n  autoplayDelay = 3000,\n  pauseOnHover = false,\n  loop = false,\n  round = false\n}: CarouselProps): React.JSX.Element {\n  const containerPadding = 16;\n  const itemWidth = baseWidth - containerPadding * 2;\n  const trackItemOffset = itemWidth + GAP;\n\n  const carouselItems = loop ? [...items, items[0]] : items;\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const x = useMotionValue(0);\n  const [isHovered, setIsHovered] = useState<boolean>(false);\n  const [isResetting, setIsResetting] = useState<boolean>(false);\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (pauseOnHover && containerRef.current) {\n      const container = containerRef.current;\n      const handleMouseEnter = () => setIsHovered(true);\n      const handleMouseLeave = () => setIsHovered(false);\n      container.addEventListener('mouseenter', handleMouseEnter);\n      container.addEventListener('mouseleave', handleMouseLeave);\n      return () => {\n        container.removeEventListener('mouseenter', handleMouseEnter);\n        container.removeEventListener('mouseleave', handleMouseLeave);\n      };\n    }\n  }, [pauseOnHover]);\n\n  useEffect(() => {\n    if (autoplay && (!pauseOnHover || !isHovered)) {\n      const timer = setInterval(() => {\n        setCurrentIndex(prev => {\n          if (prev === items.length - 1 && loop) {\n            return prev + 1;\n          }\n          if (prev === carouselItems.length - 1) {\n            return loop ? 0 : prev;\n          }\n          return prev + 1;\n        });\n      }, autoplayDelay);\n      return () => clearInterval(timer);\n    }\n  }, [autoplay, autoplayDelay, isHovered, loop, items.length, carouselItems.length, pauseOnHover]);\n\n  const effectiveTransition = isResetting ? { duration: 0 } : SPRING_OPTIONS;\n\n  const handleAnimationComplete = () => {\n    if (loop && currentIndex === carouselItems.length - 1) {\n      setIsResetting(true);\n      x.set(0);\n      setCurrentIndex(0);\n      setTimeout(() => setIsResetting(false), 50);\n    }\n  };\n\n  const handleDragEnd = (_: MouseEvent | TouchEvent | PointerEvent, info: PanInfo): void => {\n    const offset = info.offset.x;\n    const velocity = info.velocity.x;\n    if (offset < -DRAG_BUFFER || velocity < -VELOCITY_THRESHOLD) {\n      if (loop && currentIndex === items.length - 1) {\n        setCurrentIndex(currentIndex + 1);\n      } else {\n        setCurrentIndex(prev => Math.min(prev + 1, carouselItems.length - 1));\n      }\n    } else if (offset > DRAG_BUFFER || velocity > VELOCITY_THRESHOLD) {\n      if (loop && currentIndex === 0) {\n        setCurrentIndex(items.length - 1);\n      } else {\n        setCurrentIndex(prev => Math.max(prev - 1, 0));\n      }\n    }\n  };\n\n  const dragProps = loop\n    ? {}\n    : {\n        dragConstraints: {\n          left: -trackItemOffset * (carouselItems.length - 1),\n          right: 0\n        }\n      };\n\n  return (\n    <div\n      ref={containerRef}\n      className={`carousel-container ${round ? 'round' : ''}`}\n      style={{\n        width: `${baseWidth}px`,\n        ...(round && { height: `${baseWidth}px`, borderRadius: '50%' })\n      }}\n    >\n      <motion.div\n        className=\"carousel-track\"\n        drag=\"x\"\n        {...dragProps}\n        style={{\n          width: itemWidth,\n          gap: `${GAP}px`,\n          perspective: 1000,\n          perspectiveOrigin: `${currentIndex * trackItemOffset + itemWidth / 2}px 50%`,\n          x\n        }}\n        onDragEnd={handleDragEnd}\n        animate={{ x: -(currentIndex * trackItemOffset) }}\n        transition={effectiveTransition}\n        onAnimationComplete={handleAnimationComplete}\n      >\n        {carouselItems.map((item, index) => {\n          const range = [-(index + 1) * trackItemOffset, -index * trackItemOffset, -(index - 1) * trackItemOffset];\n          const outputRange = [90, 0, -90];\n          const rotateY = useTransform(x, range, outputRange, { clamp: false });\n          return (\n            <motion.div\n              key={index}\n              className={`carousel-item ${round ? 'round' : ''}`}\n              style={{\n                width: itemWidth,\n                height: round ? itemWidth : '100%',\n                rotateY: rotateY,\n                ...(round && { borderRadius: '50%' })\n              }}\n              transition={effectiveTransition}\n            >\n              <div className={`carousel-item-header ${round ? 'round' : ''}`}>\n                <span className=\"carousel-icon-container\">{item.icon}</span>\n              </div>\n              <div className=\"carousel-item-content\">\n                <div className=\"carousel-item-title\">{item.title}</div>\n                <p className=\"carousel-item-description\">{item.description}</p>\n              </div>\n            </motion.div>\n          );\n        })}\n      </motion.div>\n      <div className={`carousel-indicators-container ${round ? 'round' : ''}`}>\n        <div className=\"carousel-indicators\">\n          {items.map((_, index) => (\n            <motion.div\n              key={index}\n              className={`carousel-indicator ${currentIndex % items.length === index ? 'active' : 'inactive'}`}\n              animate={{\n                scale: currentIndex % items.length === index ? 1.2 : 1\n              }}\n              onClick={() => setCurrentIndex(index)}\n              transition={{ duration: 0.15 }}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "public/ts/default/src/ts-default/Components/Carousel/Carousel.css",
      "content": ".carousel-container {\n  position: relative;\n  overflow: hidden;\n  border: 1px solid #555;\n  border-radius: 24px;\n  padding: 16px;\n  --outer-r: 24px;\n  --p-distance: 12px;\n}\n\n.carousel-track {\n  display: flex;\n}\n\n.carousel-item {\n  position: relative;\n  display: flex;\n  flex-shrink: 0;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-between;\n  border: 1px solid #555;\n  border-radius: calc(var(--outer-r) - var(--p-distance));\n  background-color: #0d0d0d;\n  overflow: hidden;\n  cursor: grab;\n}\n\n.carousel-item:active {\n  cursor: grabbing;\n}\n\n.carousel-container.round {\n  border: 1px solid #555;\n}\n\n.carousel-item.round {\n  background-color: #0d0d0d;\n  position: relative;\n  bottom: 0.1em;\n  border: 1px solid #555;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n}\n\n.carousel-item-header.round {\n  padding: 0;\n  margin: 0;\n}\n\n.carousel-indicators-container.round {\n  position: absolute;\n  z-index: 2;\n  bottom: 3em;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.carousel-indicator.active {\n  background-color: #333333;\n}\n\n.carousel-indicator.inactive {\n  background-color: rgba(51, 51, 51, 0.4);\n}\n\n.carousel-item-header {\n  margin-bottom: 16px;\n  padding: 20px;\n  padding-top: 20px;\n}\n\n.carousel-icon-container {\n  display: flex;\n  height: 28px;\n  width: 28px;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  background-color: #fff;\n}\n\n.carousel-icon {\n  height: 16px;\n  width: 16px;\n  color: #060010;\n}\n\n.carousel-item-content {\n  padding: 20px;\n  padding-bottom: 20px;\n}\n\n.carousel-item-title {\n  margin-bottom: 4px;\n  font-weight: 900;\n  font-size: 18px;\n  color: #fff;\n}\n\n.carousel-item-description {\n  font-size: 14px;\n  color: #fff;\n}\n\n.carousel-indicators-container {\n  display: flex;\n  width: 100%;\n  justify-content: center;\n}\n\n.carousel-indicators {\n  margin-top: 16px;\n  display: flex;\n  width: 150px;\n  justify-content: space-between;\n  padding: 0 32px;\n}\n\n.carousel-indicator {\n  height: 8px;\n  width: 8px;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 150ms;\n}\n\n.carousel-indicator.active {\n  background-color: #fff;\n}\n\n.carousel-indicator.inactive {\n  background-color: #555;\n}\n",
      "type": "registry:item"
    }
  ]
}
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "CountUp-TS-CSS",
  "type": "registry:block",
  "title": "CountUp",
  "description": "Animated number counter supporting formatting and decimals.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "public/ts/default/src/ts-default/TextAnimations/CountUp/CountUp.tsx",
      "content": "import { useEffect, useRef } from 'react';\nimport { useInView, useMotionValue, useSpring } from 'motion/react';\n\ninterface CountUpProps {\n  to: number;\n  from?: number;\n  direction?: 'up' | 'down';\n  delay?: number;\n  duration?: number;\n  className?: string;\n  startWhen?: boolean;\n  separator?: string;\n  onStart?: () => void;\n  onEnd?: () => void;\n}\n\nexport default function CountUp({\n  to,\n  from = 0,\n  direction = 'up',\n  delay = 0,\n  duration = 2,\n  className = '',\n  startWhen = true,\n  separator = '',\n  onStart,\n  onEnd\n}: CountUpProps) {\n  const ref = useRef<HTMLSpanElement>(null);\n  const motionValue = useMotionValue(direction === 'down' ? to : from);\n\n  const damping = 20 + 40 * (1 / duration);\n  const stiffness = 100 * (1 / duration);\n\n  const springValue = useSpring(motionValue, {\n    damping,\n    stiffness\n  });\n\n  const isInView = useInView(ref, { once: true, margin: '0px' });\n\n  const getDecimalPlaces = (num: number): number => {\n    const str = num.toString();\n    if (str.includes('.')) {\n      const decimals = str.split('.')[1];\n      if (parseInt(decimals) !== 0) {\n        return decimals.length;\n      }\n    }\n    return 0;\n  };\n\n  const maxDecimals = Math.max(getDecimalPlaces(from), getDecimalPlaces(to));\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.textContent = String(direction === 'down' ? to : from);\n    }\n  }, [from, to, direction]);\n\n  useEffect(() => {\n    if (isInView && startWhen) {\n      if (typeof onStart === 'function') {\n        onStart();\n      }\n\n      const timeoutId = setTimeout(() => {\n        motionValue.set(direction === 'down' ? from : to);\n      }, delay * 1000);\n\n      const durationTimeoutId = setTimeout(\n        () => {\n          if (typeof onEnd === 'function') {\n            onEnd();\n          }\n        },\n        delay * 1000 + duration * 1000\n      );\n\n      return () => {\n        clearTimeout(timeoutId);\n        clearTimeout(durationTimeoutId);\n      };\n    }\n  }, [isInView, startWhen, motionValue, direction, from, to, delay, onStart, onEnd, duration]);\n\n  useEffect(() => {\n    const unsubscribe = springValue.on('change', latest => {\n      if (ref.current) {\n        const hasDecimals = maxDecimals > 0;\n\n        const options: Intl.NumberFormatOptions = {\n          useGrouping: !!separator,\n          minimumFractionDigits: hasDecimals ? maxDecimals : 0,\n          maximumFractionDigits: hasDecimals ? maxDecimals : 0\n        };\n\n        const formattedNumber = Intl.NumberFormat('en-US', options).format(latest);\n\n        ref.current.textContent = separator ? formattedNumber.replace(/,/g, separator) : formattedNumber;\n      }\n    });\n\n    return () => unsubscribe();\n  }, [springValue, separator, maxDecimals]);\n\n  return <span className={className} ref={ref} />;\n}\n",
      "type": "registry:component"
    }
  ]
}
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "LogoLoop-TS-TW",
  "type": "registry:block",
  "title": "LogoLoop",
  "description": "Continuously looping marquee of brand or tech logos with seamless repeat and hover pause.",
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Animations/LogoLoop/LogoLoop.tsx",
      "content": "import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nexport type LogoItem =\n  | {\n      node: React.ReactNode;\n      href?: string;\n      title?: string;\n      ariaLabel?: string;\n    }\n  | {\n      src: string;\n      alt?: string;\n      href?: string;\n      title?: string;\n      srcSet?: string;\n      sizes?: string;\n      width?: number;\n      height?: number;\n    };\n\nexport interface LogoLoopProps {\n  logos: LogoItem[];\n  speed?: number;\n  direction?: 'left' | 'right';\n  width?: number | string;\n  logoHeight?: number;\n  gap?: number;\n  pauseOnHover?: boolean;\n  fadeOut?: boolean;\n  fadeOutColor?: string;\n  scaleOnHover?: boolean;\n  ariaLabel?: string;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nconst ANIMATION_CONFIG = {\n  SMOOTH_TAU: 0.25,\n  MIN_COPIES: 2,\n  COPY_HEADROOM: 2\n} as const;\n\nconst toCssLength = (value?: number | string): string | undefined =>\n  typeof value === 'number' ? `${value}px` : (value ?? undefined);\n\nconst cx = (...parts: Array<string | false | null | undefined>) => parts.filter(Boolean).join(' ');\n\nconst useResizeObserver = (\n  callback: () => void,\n  elements: Array<React.RefObject<Element | null>>,\n  dependencies: React.DependencyList\n) => {\n  useEffect(() => {\n    if (!window.ResizeObserver) {\n      const handleResize = () => callback();\n      window.addEventListener('resize', handleResize);\n      callback();\n      return () => window.removeEventListener('resize', handleResize);\n    }\n\n    const observers = elements.map(ref => {\n      if (!ref.current) return null;\n      const observer = new ResizeObserver(callback);\n      observer.observe(ref.current);\n      return observer;\n    });\n\n    callback();\n\n    return () => {\n      observers.forEach(observer => observer?.disconnect());\n    };\n  }, dependencies);\n};\n\nconst useImageLoader = (\n  seqRef: React.RefObject<HTMLUListElement | null>,\n  onLoad: () => void,\n  dependencies: React.DependencyList\n) => {\n  useEffect(() => {\n    const images = seqRef.current?.querySelectorAll('img') ?? [];\n\n    if (images.length === 0) {\n      onLoad();\n      return;\n    }\n\n    let remainingImages = images.length;\n    const handleImageLoad = () => {\n      remainingImages -= 1;\n      if (remainingImages === 0) {\n        onLoad();\n      }\n    };\n\n    images.forEach(img => {\n      const htmlImg = img as HTMLImageElement;\n      if (htmlImg.complete) {\n        handleImageLoad();\n      } else {\n        htmlImg.addEventListener('load', handleImageLoad, { once: true });\n        htmlImg.addEventListener('error', handleImageLoad, { once: true });\n      }\n    });\n\n    return () => {\n      images.forEach(img => {\n        img.removeEventListener('load', handleImageLoad);\n        img.removeEventListener('error', handleImageLoad);\n      });\n    };\n  }, dependencies);\n};\n\nconst useAnimationLoop = (\n  trackRef: React.RefObject<HTMLDivElement | null>,\n  targetVelocity: number,\n  seqWidth: number,\n  isHovered: boolean,\n  pauseOnHover: boolean\n) => {\n  const rafRef = useRef<number | null>(null);\n  const lastTimestampRef = useRef<number | null>(null);\n  const offsetRef = useRef(0);\n  const velocityRef = useRef(0);\n\n  useEffect(() => {\n    const track = trackRef.current;\n    if (!track) return;\n\n    const prefersReduced =\n      typeof window !== 'undefined' &&\n      window.matchMedia &&\n      window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n    if (seqWidth > 0) {\n      offsetRef.current = ((offsetRef.current % seqWidth) + seqWidth) % seqWidth;\n      track.style.transform = `translate3d(${-offsetRef.current}px, 0, 0)`;\n    }\n\n    if (prefersReduced) {\n      track.style.transform = 'translate3d(0, 0, 0)';\n      return () => {\n        lastTimestampRef.current = null;\n      };\n    }\n\n    const animate = (timestamp: number) => {\n      if (lastTimestampRef.current === null) {\n        lastTimestampRef.current = timestamp;\n      }\n\n      const deltaTime = Math.max(0, timestamp - lastTimestampRef.current) / 1000;\n      lastTimestampRef.current = timestamp;\n\n      const target = pauseOnHover && isHovered ? 0 : targetVelocity;\n\n      const easingFactor = 1 - Math.exp(-deltaTime / ANIMATION_CONFIG.SMOOTH_TAU);\n      velocityRef.current += (target - velocityRef.current) * easingFactor;\n\n      if (seqWidth > 0) {\n        let nextOffset = offsetRef.current + velocityRef.current * deltaTime;\n        nextOffset = ((nextOffset % seqWidth) + seqWidth) % seqWidth;\n        offsetRef.current = nextOffset;\n\n        const translateX = -offsetRef.current;\n        track.style.transform = `translate3d(${translateX}px, 0, 0)`;\n      }\n\n      rafRef.current = requestAnimationFrame(animate);\n    };\n\n    rafRef.current = requestAnimationFrame(animate);\n\n    return () => {\n      if (rafRef.current !== null) {\n        cancelAnimationFrame(rafRef.current);\n        rafRef.current = null;\n      }\n      lastTimestampRef.current = null;\n    };\n  }, [targetVelocity, seqWidth, isHovered, pauseOnHover]);\n};\n\nexport const LogoLoop = React.memo<LogoLoopProps>(\n  ({\n    logos,\n    speed = 120,\n    direction = 'left',\n    width = '100%',\n    logoHeight = 28,\n    gap = 32,\n    pauseOnHover = true,\n    fadeOut = false,\n    fadeOutColor,\n    scaleOnHover = false,\n    ariaLabel = 'Partner logos',\n    className,\n    style\n  }) => {\n    const containerRef = useRef<HTMLDivElement>(null);\n    const trackRef = useRef<HTMLDivElement>(null);\n    const seqRef = useRef<HTMLUListElement>(null);\n\n    const [seqWidth, setSeqWidth] = useState<number>(0);\n    const [copyCount, setCopyCount] = useState<number>(ANIMATION_CONFIG.MIN_COPIES);\n    const [isHovered, setIsHovered] = useState<boolean>(false);\n\n    const targetVelocity = useMemo(() => {\n      const magnitude = Math.abs(speed);\n      const directionMultiplier = direction === 'left' ? 1 : -1;\n      const speedMultiplier = speed < 0 ? -1 : 1;\n      return magnitude * directionMultiplier * speedMultiplier;\n    }, [speed, direction]);\n\n    const updateDimensions = useCallback(() => {\n      const containerWidth = containerRef.current?.clientWidth ?? 0;\n      const sequenceWidth = seqRef.current?.getBoundingClientRect?.()?.width ?? 0;\n\n      if (sequenceWidth > 0) {\n        setSeqWidth(Math.ceil(sequenceWidth));\n        const copiesNeeded = Math.ceil(containerWidth / sequenceWidth) + ANIMATION_CONFIG.COPY_HEADROOM;\n        setCopyCount(Math.max(ANIMATION_CONFIG.MIN_COPIES, copiesNeeded));\n      }\n    }, []);\n\n    useResizeObserver(updateDimensions, [containerRef, seqRef], [logos, gap, logoHeight]);\n\n    useImageLoader(seqRef, updateDimensions, [logos, gap, logoHeight]);\n\n    useAnimationLoop(trackRef, targetVelocity, seqWidth, isHovered, pauseOnHover);\n\n    const cssVariables = useMemo(\n      () =>\n        ({\n          '--logoloop-gap': `${gap}px`,\n          '--logoloop-logoHeight': `${logoHeight}px`,\n          ...(fadeOutColor && { '--logoloop-fadeColor': fadeOutColor })\n        }) as React.CSSProperties,\n      [gap, logoHeight, fadeOutColor]\n    );\n\n    const rootClasses = useMemo(\n      () =>\n        cx(\n          'relative overflow-x-hidden group',\n          '[--logoloop-gap:32px]',\n          '[--logoloop-logoHeight:28px]',\n          '[--logoloop-fadeColorAuto:#ffffff]',\n          'dark:[--logoloop-fadeColorAuto:#0b0b0b]',\n          scaleOnHover && 'py-[calc(var(--logoloop-logoHeight)*0.1)]',\n          className\n        ),\n      [scaleOnHover, className]\n    );\n\n    const handleMouseEnter = useCallback(() => {\n      if (pauseOnHover) setIsHovered(true);\n    }, [pauseOnHover]);\n\n    const handleMouseLeave = useCallback(() => {\n      if (pauseOnHover) setIsHovered(false);\n    }, [pauseOnHover]);\n\n    const renderLogoItem = useCallback(\n      (item: LogoItem, key: React.Key) => {\n        const isNodeItem = 'node' in item;\n\n        const content = isNodeItem ? (\n          <span\n            className={cx(\n              'inline-flex items-center',\n              'motion-reduce:transition-none',\n              scaleOnHover &&\n                'transition-transform duration-300 ease-[cubic-bezier(0.4,0,0.2,1)] group-hover/item:scale-120'\n            )}\n            aria-hidden={!!(item as any).href && !(item as any).ariaLabel}\n          >\n            {(item as any).node}\n          </span>\n        ) : (\n          <img\n            className={cx(\n              'h-[var(--logoloop-logoHeight)] w-auto block object-contain',\n              '[-webkit-user-drag:none] pointer-events-none',\n              '[image-rendering:-webkit-optimize-contrast]',\n              'motion-reduce:transition-none',\n              scaleOnHover &&\n                'transition-transform duration-300 ease-[cubic-bezier(0.4,0,0.2,1)] group-hover/item:scale-120'\n            )}\n            src={(item as any).src}\n            srcSet={(item as any).srcSet}\n            sizes={(item as any).sizes}\n            width={(item as any).width}\n            height={(item as any).height}\n            alt={(item as any).alt ?? ''}\n            title={(item as any).title}\n            loading=\"lazy\"\n            decoding=\"async\"\n            draggable={false}\n          />\n        );\n\n        const itemAriaLabel = isNodeItem\n          ? ((item as any).ariaLabel ?? (item as any).title)\n          : ((item as any).alt ?? (item as any).title);\n\n        const inner = (item as any).href ? (\n          <a\n            className={cx(\n              'inline-flex items-center no-underline rounded',\n              'transition-opacity duration-200 ease-linear',\n              'hover:opacity-80',\n              'focus-visible:outline focus-visible:outline-current focus-visible:outline-offset-2'\n            )}\n            href={(item as any).href}\n            aria-label={itemAriaLabel || 'logo link'}\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            {content}\n          </a>\n        ) : (\n          content\n        );\n\n        return (\n          <li\n            className={cx(\n              'flex-none mr-[var(--logoloop-gap)] text-[length:var(--logoloop-logoHeight)] leading-[1]',\n              scaleOnHover && 'overflow-visible group/item'\n            )}\n            key={key}\n            role=\"listitem\"\n          >\n            {inner}\n          </li>\n        );\n      },\n      [scaleOnHover]\n    );\n\n    const logoLists = useMemo(\n      () =>\n        Array.from({ length: copyCount }, (_, copyIndex) => (\n          <ul\n            className=\"flex items-center\"\n            key={`copy-${copyIndex}`}\n            role=\"list\"\n            aria-hidden={copyIndex > 0}\n            ref={copyIndex === 0 ? seqRef : undefined}\n          >\n            {logos.map((item, itemIndex) => renderLogoItem(item, `${copyIndex}-${itemIndex}`))}\n          </ul>\n        )),\n      [copyCount, logos, renderLogoItem]\n    );\n\n    const containerStyle = useMemo(\n      (): React.CSSProperties => ({\n        width: toCssLength(width) ?? '100%',\n        ...cssVariables,\n        ...style\n      }),\n      [width, cssVariables, style]\n    );\n\n    return (\n      <div\n        ref={containerRef}\n        className={rootClasses}\n        style={containerStyle}\n        role=\"region\"\n        aria-label={ariaLabel}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        {fadeOut && (\n          <>\n            <div\n              aria-hidden\n              className={cx(\n                'pointer-events-none absolute inset-y-0 left-0 z-[1]',\n                'w-[clamp(24px,8%,120px)]',\n                'bg-[linear-gradient(to_right,var(--logoloop-fadeColor,var(--logoloop-fadeColorAuto))_0%,rgba(0,0,0,0)_100%)]'\n              )}\n            />\n            <div\n              aria-hidden\n              className={cx(\n                'pointer-events-none absolute inset-y-0 right-0 z-[1]',\n                'w-[clamp(24px,8%,120px)]',\n                'bg-[linear-gradient(to_left,var(--logoloop-fadeColor,var(--logoloop-fadeColorAuto))_0%,rgba(0,0,0,0)_100%)]'\n              )}\n            />\n          </>\n        )}\n\n        <div\n          className={cx('flex w-max will-change-transform select-none', 'motion-reduce:transform-none')}\n          ref={trackRef}\n        >\n          {logoLists}\n        </div>\n      </div>\n    );\n  }\n);\n\nLogoLoop.displayName = 'LogoLoop';\n\nexport default LogoLoop;\n",
      "type": "registry:component"
    }
  ]
}
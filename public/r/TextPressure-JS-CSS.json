{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "TextPressure-JS-CSS",
  "type": "registry:block",
  "title": "TextPressure",
  "description": "Characters scale / warp interactively based on pointer pressure zone.",
  "files": [
    {
      "path": "public/default/src/content/TextAnimations/TextPressure/TextPressure.jsx",
      "content": "// Component ported from https://codepen.io/JuanFuentes/full/rgXKGQ\n\nimport { useEffect, useRef, useState } from 'react';\n\nconst TextPressure = ({\n  text = 'Compressa',\n  fontFamily = 'Compressa VF',\n  // This font is just an example, you should not use it in commercial projects.\n  fontUrl = 'https://res.cloudinary.com/dr6lvwubh/raw/upload/v1529908256/CompressaPRO-GX.woff2',\n\n  width = true,\n  weight = true,\n  italic = true,\n  alpha = false,\n\n  flex = true,\n  stroke = false,\n  scale = false,\n\n  textColor = '#FFFFFF',\n  strokeColor = '#FF0000',\n  className = '',\n\n  minFontSize = 24\n}) => {\n  const containerRef = useRef(null);\n  const titleRef = useRef(null);\n  const spansRef = useRef([]);\n\n  const mouseRef = useRef({ x: 0, y: 0 });\n  const cursorRef = useRef({ x: 0, y: 0 });\n\n  const [fontSize, setFontSize] = useState(minFontSize);\n  const [scaleY, setScaleY] = useState(1);\n  const [lineHeight, setLineHeight] = useState(1);\n\n  const chars = text.split('');\n\n  const dist = (a, b) => {\n    const dx = b.x - a.x;\n    const dy = b.y - a.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  useEffect(() => {\n    const handleMouseMove = e => {\n      cursorRef.current.x = e.clientX;\n      cursorRef.current.y = e.clientY;\n    };\n    const handleTouchMove = e => {\n      const t = e.touches[0];\n      cursorRef.current.x = t.clientX;\n      cursorRef.current.y = t.clientY;\n    };\n\n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('touchmove', handleTouchMove, { passive: false });\n\n    if (containerRef.current) {\n      const { left, top, width, height } = containerRef.current.getBoundingClientRect();\n      mouseRef.current.x = left + width / 2;\n      mouseRef.current.y = top + height / 2;\n      cursorRef.current.x = mouseRef.current.x;\n      cursorRef.current.y = mouseRef.current.y;\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchmove', handleTouchMove);\n    };\n  }, []);\n\n  const setSize = () => {\n    if (!containerRef.current || !titleRef.current) return;\n\n    const { width: containerW, height: containerH } = containerRef.current.getBoundingClientRect();\n\n    let newFontSize = containerW / (chars.length / 2);\n    newFontSize = Math.max(newFontSize, minFontSize);\n\n    setFontSize(newFontSize);\n    setScaleY(1);\n    setLineHeight(1);\n\n    requestAnimationFrame(() => {\n      if (!titleRef.current) return;\n      const textRect = titleRef.current.getBoundingClientRect();\n\n      if (scale && textRect.height > 0) {\n        const yRatio = containerH / textRect.height;\n        setScaleY(yRatio);\n        setLineHeight(yRatio);\n      }\n    });\n  };\n\n  useEffect(() => {\n    setSize();\n    window.addEventListener('resize', setSize);\n    return () => window.removeEventListener('resize', setSize);\n    // eslint-disable-next-line\n  }, [scale, text]);\n\n  useEffect(() => {\n    let rafId;\n    const animate = () => {\n      mouseRef.current.x += (cursorRef.current.x - mouseRef.current.x) / 15;\n      mouseRef.current.y += (cursorRef.current.y - mouseRef.current.y) / 15;\n\n      if (titleRef.current) {\n        const titleRect = titleRef.current.getBoundingClientRect();\n        const maxDist = titleRect.width / 2;\n\n        spansRef.current.forEach(span => {\n          if (!span) return;\n\n          const rect = span.getBoundingClientRect();\n          const charCenter = {\n            x: rect.x + rect.width / 2,\n            y: rect.y + rect.height / 2\n          };\n\n          const d = dist(mouseRef.current, charCenter);\n\n          const getAttr = (distance, minVal, maxVal) => {\n            const val = maxVal - Math.abs((maxVal * distance) / maxDist);\n            return Math.max(minVal, val + minVal);\n          };\n\n          const wdth = width ? Math.floor(getAttr(d, 5, 200)) : 100;\n          const wght = weight ? Math.floor(getAttr(d, 100, 900)) : 400;\n          const italVal = italic ? getAttr(d, 0, 1).toFixed(2) : 0;\n          const alphaVal = alpha ? getAttr(d, 0, 1).toFixed(2) : 1;\n\n          span.style.opacity = alphaVal;\n          span.style.fontVariationSettings = `'wght' ${wght}, 'wdth' ${wdth}, 'ital' ${italVal}`;\n        });\n      }\n\n      rafId = requestAnimationFrame(animate);\n    };\n\n    animate();\n    return () => cancelAnimationFrame(rafId);\n  }, [width, weight, italic, alpha, chars.length]);\n\n  const dynamicClassName = [className, flex ? 'flex' : '', stroke ? 'stroke' : ''].filter(Boolean).join(' ');\n\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        position: 'relative',\n        width: '100%',\n        height: '100%',\n        background: 'transparent'\n      }}\n    >\n      <style>{`\n        @font-face {\n          font-family: '${fontFamily}';\n          src: url('${fontUrl}');\n          font-style: normal;\n        }\n\n        .flex {\n          display: flex;\n          justify-content: space-between;\n        }\n\n        .stroke span {\n          position: relative;\n          color: ${textColor};\n        }\n        .stroke span::after {\n          content: attr(data-char);\n          position: absolute;\n          left: 0;\n          top: 0;\n          color: transparent;\n          z-index: -1;\n          -webkit-text-stroke-width: 3px;\n          -webkit-text-stroke-color: ${strokeColor};\n        }\n\n        .text-pressure-title {\n          color: ${textColor};\n        }\n      `}</style>\n\n      <h1\n        ref={titleRef}\n        className={`text-pressure-title ${dynamicClassName}`}\n        style={{\n          fontFamily,\n          textTransform: 'uppercase',\n          fontSize: fontSize,\n          lineHeight,\n          transform: `scale(1, ${scaleY})`,\n          transformOrigin: 'center top',\n          margin: 0,\n          textAlign: 'center',\n          userSelect: 'none',\n          whiteSpace: 'nowrap',\n          fontWeight: 100,\n          width: '100%'\n        }}\n      >\n        {chars.map((char, i) => (\n          <span\n            key={i}\n            ref={el => (spansRef.current[i] = el)}\n            data-char={char}\n            style={{\n              display: 'inline-block',\n              color: stroke ? undefined : textColor\n            }}\n          >\n            {char}\n          </span>\n        ))}\n      </h1>\n    </div>\n  );\n};\n\nexport default TextPressure;\n",
      "type": "registry:component"
    }
  ]
}
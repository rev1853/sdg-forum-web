{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "SplitText-TS-CSS",
  "type": "registry:block",
  "title": "SplitText",
  "description": "Splits text into characters / words for staggered entrance animation.",
  "dependencies": [
    "@gsap/react",
    "gsap"
  ],
  "files": [
    {
      "path": "public/ts/default/src/ts-default/TextAnimations/SplitText/SplitText.tsx",
      "content": "import React, { useRef, useEffect, useState } from 'react';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport { SplitText as GSAPSplitText } from 'gsap/SplitText';\nimport { useGSAP } from '@gsap/react';\n\ngsap.registerPlugin(ScrollTrigger, GSAPSplitText, useGSAP);\n\nexport interface SplitTextProps {\n  text: string;\n  className?: string;\n  delay?: number;\n  duration?: number;\n  ease?: string | ((t: number) => number);\n  splitType?: 'chars' | 'words' | 'lines' | 'words, chars';\n  from?: gsap.TweenVars;\n  to?: gsap.TweenVars;\n  threshold?: number;\n  rootMargin?: string;\n  tag?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'span';\n  textAlign?: React.CSSProperties['textAlign'];\n  onLetterAnimationComplete?: () => void;\n}\n\nconst SplitText: React.FC<SplitTextProps> = ({\n  text,\n  className = '',\n  delay = 100,\n  duration = 0.6,\n  ease = 'power3.out',\n  splitType = 'chars',\n  from = { opacity: 0, y: 40 },\n  to = { opacity: 1, y: 0 },\n  threshold = 0.1,\n  rootMargin = '-100px',\n  textAlign = 'center',\n  tag = 'p',\n  onLetterAnimationComplete\n}) => {\n  const ref = useRef<HTMLParagraphElement>(null);\n  const animationCompletedRef = useRef(false);\n  const [fontsLoaded, setFontsLoaded] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (document.fonts.status === 'loaded') {\n      setFontsLoaded(true);\n    } else {\n      document.fonts.ready.then(() => {\n        setFontsLoaded(true);\n      });\n    }\n  }, []);\n\n  useGSAP(\n    () => {\n      if (!ref.current || !text || !fontsLoaded) return;\n\n      const el = ref.current as HTMLElement & {\n        _rbsplitInstance?: GSAPSplitText;\n      };\n\n      if (el._rbsplitInstance) {\n        try {\n          el._rbsplitInstance.revert();\n        } catch (_) {}\n        el._rbsplitInstance = undefined;\n      }\n\n      const startPct = (1 - threshold) * 100;\n      const marginMatch = /^(-?\\d+(?:\\.\\d+)?)(px|em|rem|%)?$/.exec(rootMargin);\n      const marginValue = marginMatch ? parseFloat(marginMatch[1]) : 0;\n      const marginUnit = marginMatch ? marginMatch[2] || 'px' : 'px';\n      const sign =\n        marginValue === 0\n          ? ''\n          : marginValue < 0\n            ? `-=${Math.abs(marginValue)}${marginUnit}`\n            : `+=${marginValue}${marginUnit}`;\n      const start = `top ${startPct}%${sign}`;\n      let targets: Element[] = [];\n      const assignTargets = (self: GSAPSplitText) => {\n        if (splitType.includes('chars') && self.chars.length) targets = self.chars;\n        if (!targets.length && splitType.includes('words') && self.words.length) targets = self.words;\n        if (!targets.length && splitType.includes('lines') && self.lines.length) targets = self.lines;\n        if (!targets.length) targets = self.chars || self.words || self.lines;\n      };\n      const splitInstance = new GSAPSplitText(el, {\n        type: splitType,\n        smartWrap: true,\n        autoSplit: splitType === 'lines',\n        linesClass: 'split-line',\n        wordsClass: 'split-word',\n        charsClass: 'split-char',\n        reduceWhiteSpace: false,\n        onSplit: (self: GSAPSplitText) => {\n          assignTargets(self);\n          return gsap.fromTo(\n            targets,\n            { ...from },\n            {\n              ...to,\n              duration,\n              ease,\n              stagger: delay / 1000,\n              scrollTrigger: {\n                trigger: el,\n                start,\n                once: true,\n                fastScrollEnd: true,\n                anticipatePin: 0.4\n              },\n              onComplete: () => {\n                animationCompletedRef.current = true;\n                onLetterAnimationComplete?.();\n              },\n              willChange: 'transform, opacity',\n              force3D: true\n            }\n          );\n        }\n      });\n      el._rbsplitInstance = splitInstance;\n      return () => {\n        ScrollTrigger.getAll().forEach(st => {\n          if (st.trigger === el) st.kill();\n        });\n        try {\n          splitInstance.revert();\n        } catch (_) {}\n        el._rbsplitInstance = undefined;\n      };\n    },\n    {\n      dependencies: [\n        text,\n        delay,\n        duration,\n        ease,\n        splitType,\n        JSON.stringify(from),\n        JSON.stringify(to),\n        threshold,\n        rootMargin,\n        fontsLoaded,\n        onLetterAnimationComplete\n      ],\n      scope: ref\n    }\n  );\n\n  const renderTag = () => {\n    const style: React.CSSProperties = {\n      textAlign,\n      overflow: 'hidden',\n      display: 'inline-block',\n      whiteSpace: 'normal',\n      wordWrap: 'break-word',\n      willChange: 'transform, opacity'\n    };\n    const classes = `split-parent ${className}`;\n    switch (tag) {\n      case 'h1':\n        return (\n          <h1 ref={ref} style={style} className={classes}>\n            {text}\n          </h1>\n        );\n      case 'h2':\n        return (\n          <h2 ref={ref} style={style} className={classes}>\n            {text}\n          </h2>\n        );\n      case 'h3':\n        return (\n          <h3 ref={ref} style={style} className={classes}>\n            {text}\n          </h3>\n        );\n      case 'h4':\n        return (\n          <h4 ref={ref} style={style} className={classes}>\n            {text}\n          </h4>\n        );\n      case 'h5':\n        return (\n          <h5 ref={ref} style={style} className={classes}>\n            {text}\n          </h5>\n        );\n      case 'h6':\n        return (\n          <h6 ref={ref} style={style} className={classes}>\n            {text}\n          </h6>\n        );\n      default:\n        return (\n          <p ref={ref} style={style} className={classes}>\n            {text}\n          </p>\n        );\n    }\n  };\n  return renderTag();\n};\n\nexport default SplitText;\n",
      "type": "registry:component"
    }
  ]
}
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Crosshair-JS-CSS",
  "type": "registry:block",
  "title": "Crosshair",
  "description": "Custom crosshair cursor with tracking, and link hover effects.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/default/src/content/Animations/Crosshair/Crosshair.jsx",
      "content": "import { useEffect, useRef } from 'react';\nimport { gsap } from 'gsap';\n\nconst lerp = (a, b, n) => (1 - n) * a + n * b;\n\nconst getMousePos = (e, container) => {\n  if (container) {\n    const bounds = container.getBoundingClientRect();\n    return {\n      x: e.clientX - bounds.left,\n      y: e.clientY - bounds.top\n    };\n  }\n  return { x: e.clientX, y: e.clientY };\n};\n\nconst Crosshair = ({ color = 'white', containerRef = null }) => {\n  const cursorRef = useRef(null);\n  const lineHorizontalRef = useRef(null);\n  const lineVerticalRef = useRef(null);\n  const filterXRef = useRef(null);\n  const filterYRef = useRef(null);\n\n  let mouse = { x: 0, y: 0 };\n\n  useEffect(() => {\n    const handleMouseMove = ev => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      mouse = getMousePos(ev, containerRef?.current);\n\n      if (containerRef?.current) {\n        const bounds = containerRef.current.getBoundingClientRect();\n        if (\n          ev.clientX < bounds.left ||\n          ev.clientX > bounds.right ||\n          ev.clientY < bounds.top ||\n          ev.clientY > bounds.bottom\n        ) {\n          gsap.to([lineHorizontalRef.current, lineVerticalRef.current], { opacity: 0 });\n        } else {\n          gsap.to([lineHorizontalRef.current, lineVerticalRef.current], { opacity: 1 });\n        }\n      }\n    };\n\n    const target = containerRef?.current || window;\n    target.addEventListener('mousemove', handleMouseMove);\n\n    const renderedStyles = {\n      tx: { previous: 0, current: 0, amt: 0.15 },\n      ty: { previous: 0, current: 0, amt: 0.15 }\n    };\n\n    gsap.set([lineHorizontalRef.current, lineVerticalRef.current], { opacity: 0 });\n\n    const onMouseMove = () => {\n      renderedStyles.tx.previous = renderedStyles.tx.current = mouse.x;\n      renderedStyles.ty.previous = renderedStyles.ty.current = mouse.y;\n\n      gsap.to([lineHorizontalRef.current, lineVerticalRef.current], {\n        duration: 0.9,\n        ease: 'Power3.easeOut',\n        opacity: 1\n      });\n\n      requestAnimationFrame(render);\n\n      target.removeEventListener('mousemove', onMouseMove);\n    };\n\n    target.addEventListener('mousemove', onMouseMove);\n\n    const primitiveValues = { turbulence: 0 };\n\n    const tl = gsap\n      .timeline({\n        paused: true,\n        onStart: () => {\n          lineHorizontalRef.current.style.filter = `url(#filter-noise-x)`;\n          lineVerticalRef.current.style.filter = `url(#filter-noise-y)`;\n        },\n        onUpdate: () => {\n          if (filterXRef.current && filterYRef.current) {\n            filterXRef.current.setAttribute('baseFrequency', primitiveValues.turbulence);\n            filterYRef.current.setAttribute('baseFrequency', primitiveValues.turbulence);\n          }\n        },\n        onComplete: () => {\n          if (lineHorizontalRef.current && lineVerticalRef.current) {\n            lineHorizontalRef.current.style.filter = lineVerticalRef.current.style.filter = 'none';\n          }\n        }\n      })\n      .to(primitiveValues, {\n        duration: 0.5,\n        ease: 'power1',\n        startAt: { turbulence: 1 },\n        turbulence: 0\n      });\n\n    const enter = () => tl.restart();\n    const leave = () => tl.progress(1).kill();\n\n    const render = () => {\n      renderedStyles.tx.current = mouse.x;\n      renderedStyles.ty.current = mouse.y;\n\n      for (const key in renderedStyles) {\n        renderedStyles[key].previous = lerp(\n          renderedStyles[key].previous,\n          renderedStyles[key].current,\n          renderedStyles[key].amt\n        );\n      }\n\n      if (lineHorizontalRef.current && lineHorizontalRef.current) {\n        gsap.set(lineVerticalRef.current, { x: renderedStyles.tx.previous });\n        gsap.set(lineHorizontalRef.current, { y: renderedStyles.ty.previous });\n      }\n\n      requestAnimationFrame(render);\n    };\n\n    const links = containerRef?.current ? containerRef.current.querySelectorAll('a') : document.querySelectorAll('a');\n\n    links.forEach(link => {\n      link.addEventListener('mouseenter', enter);\n      link.addEventListener('mouseleave', leave);\n    });\n\n    return () => {\n      target.removeEventListener('mousemove', handleMouseMove);\n      target.removeEventListener('mousemove', onMouseMove);\n      links.forEach(link => {\n        link.removeEventListener('mouseenter', enter);\n        link.removeEventListener('mouseleave', leave);\n      });\n    };\n  }, [containerRef]);\n\n  return (\n    <div\n      ref={cursorRef}\n      className=\"cursor\"\n      style={{\n        position: containerRef ? 'absolute' : 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'none',\n        zIndex: 10000\n      }}\n    >\n      <svg style={{ position: 'absolute', left: 0, top: 0, width: '100%', height: '100%' }}>\n        <defs>\n          <filter id=\"filter-noise-x\">\n            <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.000001\" numOctaves=\"1\" ref={filterXRef} />\n            <feDisplacementMap in=\"SourceGraphic\" scale=\"40\" />\n          </filter>\n          <filter id=\"filter-noise-y\">\n            <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.000001\" numOctaves=\"1\" ref={filterYRef} />\n            <feDisplacementMap in=\"SourceGraphic\" scale=\"40\" />\n          </filter>\n        </defs>\n      </svg>\n      <div\n        ref={lineHorizontalRef}\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: '1px',\n          background: color,\n          pointerEvents: 'none',\n          transform: 'translateY(50%)',\n          opacity: 0\n        }}\n      ></div>\n      <div\n        ref={lineVerticalRef}\n        style={{\n          position: 'absolute',\n          height: '100%',\n          width: '1px',\n          background: color,\n          pointerEvents: 'none',\n          transform: 'translateX(50%)',\n          opacity: 0\n        }}\n      ></div>\n    </div>\n  );\n};\n\nexport default Crosshair;\n",
      "type": "registry:component"
    }
  ]
}
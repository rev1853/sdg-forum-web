{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "InfiniteScroll-TS-CSS",
  "type": "registry:block",
  "title": "InfiniteScroll",
  "description": "Infinite scrolling container auto-loads content near viewport end.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/ts/default/src/ts-default/Components/InfiniteScroll/InfiniteScroll.tsx",
      "content": "import React, { useRef, useEffect, ReactNode } from 'react';\nimport { gsap } from 'gsap';\nimport { Observer } from 'gsap/Observer';\nimport './InfiniteScroll.css';\n\ngsap.registerPlugin(Observer);\n\ninterface InfiniteScrollItem {\n  content: ReactNode;\n}\n\ninterface InfiniteScrollProps {\n  width?: string;\n  maxHeight?: string;\n  negativeMargin?: string;\n  items?: InfiniteScrollItem[];\n  itemMinHeight?: number;\n  isTilted?: boolean;\n  tiltDirection?: 'left' | 'right';\n  autoplay?: boolean;\n  autoplaySpeed?: number;\n  autoplayDirection?: 'down' | 'up';\n  pauseOnHover?: boolean;\n}\n\nconst InfiniteScroll: React.FC<InfiniteScrollProps> = ({\n  width = '30rem',\n  maxHeight = '100%',\n  negativeMargin = '-0.5em',\n  items = [],\n  itemMinHeight = 150,\n  isTilted = false,\n  tiltDirection = 'left',\n  autoplay = false,\n  autoplaySpeed = 0.5,\n  autoplayDirection = 'down',\n  pauseOnHover = false\n}) => {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTiltTransform = (): string => {\n    if (!isTilted) return 'none';\n    return tiltDirection === 'left'\n      ? 'rotateX(20deg) rotateZ(-20deg) skewX(20deg)'\n      : 'rotateX(20deg) rotateZ(20deg) skewX(-20deg)';\n  };\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n    if (items.length === 0) return;\n\n    const divItems = gsap.utils.toArray<HTMLDivElement>(container.children);\n    if (!divItems.length) return;\n\n    const firstItem = divItems[0];\n    const itemStyle = getComputedStyle(firstItem);\n    const itemHeight = firstItem.offsetHeight;\n    const itemMarginTop = parseFloat(itemStyle.marginTop) || 0;\n    const totalItemHeight = itemHeight + itemMarginTop;\n    const totalHeight = itemHeight * items.length + itemMarginTop * (items.length - 1);\n\n    const wrapFn = gsap.utils.wrap(-totalHeight, totalHeight);\n\n    divItems.forEach((child, i) => {\n      const y = i * totalItemHeight;\n      gsap.set(child, { y });\n    });\n\n    const observer = Observer.create({\n      target: container,\n      type: 'wheel,touch,pointer',\n      preventDefault: true,\n      onPress: ({ target }) => {\n        (target as HTMLElement).style.cursor = 'grabbing';\n      },\n      onRelease: ({ target }) => {\n        (target as HTMLElement).style.cursor = 'grab';\n      },\n      onChange: ({ deltaY, isDragging, event }) => {\n        const d = event.type === 'wheel' ? -deltaY : deltaY;\n        const distance = isDragging ? d * 5 : d * 10;\n        divItems.forEach(child => {\n          gsap.to(child, {\n            duration: 0.5,\n            ease: 'expo.out',\n            y: `+=${distance}`,\n            modifiers: {\n              y: gsap.utils.unitize(wrapFn)\n            }\n          });\n        });\n      }\n    });\n\n    let rafId: number;\n    if (autoplay) {\n      const directionFactor = autoplayDirection === 'down' ? 1 : -1;\n      const speedPerFrame = autoplaySpeed * directionFactor;\n\n      const tick = () => {\n        divItems.forEach(child => {\n          gsap.set(child, {\n            y: `+=${speedPerFrame}`,\n            modifiers: {\n              y: gsap.utils.unitize(wrapFn)\n            }\n          });\n        });\n        rafId = requestAnimationFrame(tick);\n      };\n\n      rafId = requestAnimationFrame(tick);\n\n      if (pauseOnHover) {\n        const stopTicker = () => rafId && cancelAnimationFrame(rafId);\n        const startTicker = () => {\n          rafId = requestAnimationFrame(tick);\n        };\n\n        container.addEventListener('mouseenter', stopTicker);\n        container.addEventListener('mouseleave', startTicker);\n\n        return () => {\n          observer.kill();\n          stopTicker();\n          container.removeEventListener('mouseenter', stopTicker);\n          container.removeEventListener('mouseleave', startTicker);\n        };\n      } else {\n        return () => {\n          observer.kill();\n          rafId && cancelAnimationFrame(rafId);\n        };\n      }\n    }\n\n    return () => {\n      observer.kill();\n      if (rafId) cancelAnimationFrame(rafId);\n    };\n  }, [items, autoplay, autoplaySpeed, autoplayDirection, pauseOnHover, isTilted, tiltDirection, negativeMargin]);\n\n  return (\n    <>\n      <style>\n        {`\n          .infinite-scroll-wrapper {\n            max-height: ${maxHeight};\n          }\n  \n          .infinite-scroll-container {\n            width: ${width};\n          }\n  \n          .infinite-scroll-item {\n            height: ${itemMinHeight}px;\n            margin-top: ${negativeMargin};\n          }\n        `}\n      </style>\n      <div className=\"infinite-scroll-wrapper\" ref={wrapperRef}>\n        <div\n          className=\"infinite-scroll-container\"\n          ref={containerRef}\n          style={{\n            transform: getTiltTransform()\n          }}\n        >\n          {items.map((item, i) => (\n            <div className=\"infinite-scroll-item\" key={i}>\n              {item.content}\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default InfiniteScroll;\n",
      "type": "registry:component"
    },
    {
      "path": "public/ts/default/src/ts-default/Components/InfiniteScroll/InfiniteScroll.css",
      "content": ".infinite-scroll-wrapper {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  overflow: hidden;\n  overscroll-behavior: none;\n}\n\n.infinite-scroll-wrapper::before,\n.infinite-scroll-wrapper::after {\n  content: '';\n  position: absolute;\n  background: linear-gradient(var(--dir, to bottom), black, transparent);\n  height: 25%;\n  width: 100%;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.infinite-scroll-wrapper::before {\n  top: 0;\n}\n\n.infinite-scroll-wrapper::after {\n  --dir: to top;\n  bottom: 0;\n}\n\n.infinite-scroll-container {\n  display: flex;\n  flex-direction: column;\n  overscroll-behavior: contain;\n  padding-inline: 1rem;\n  cursor: grab;\n  transform-origin: center center;\n}\n\n.infinite-scroll-item {\n  --accent-color: #ffffff;\n  border-radius: 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 1rem;\n  font-size: 1.25rem;\n  font-weight: 600;\n  text-align: center;\n  border: 2px solid var(--accent-color);\n  user-select: none;\n  box-sizing: border-box;\n  position: relative;\n}\n",
      "type": "registry:item"
    }
  ]
}
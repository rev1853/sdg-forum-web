{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ElectricBorder-TS-CSS",
  "type": "registry:block",
  "title": "ElectricBorder",
  "description": "Jittery electric energy border with animated arcs, glow and adjustable intensity.",
  "files": [
    {
      "path": "public/ts/default/src/ts-default/Animations/ElectricBorder/ElectricBorder.tsx",
      "content": "import React, { CSSProperties, PropsWithChildren, useEffect, useId, useLayoutEffect, useRef } from 'react';\n\nimport './ElectricBorder.css';\n\ntype ElectricBorderProps = PropsWithChildren<{\n  color?: string;\n  speed?: number;\n  chaos?: number;\n  thickness?: number;\n  className?: string;\n  style?: CSSProperties;\n}>;\n\nconst ElectricBorder: React.FC<ElectricBorderProps> = ({\n  children,\n  color = '#5227FF',\n  speed = 1,\n  chaos = 1,\n  thickness = 2,\n  className,\n  style\n}: ElectricBorderProps) => {\n  const rawId = useId().replace(/[:]/g, '');\n  const filterId = `turbulent-displace-${rawId}`;\n  const svgRef = useRef<SVGSVGElement | null>(null);\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const strokeRef = useRef<HTMLDivElement | null>(null);\n\n  const updateAnim = () => {\n    const svg = svgRef.current;\n    const host = rootRef.current;\n    if (!svg || !host) return;\n\n    if (strokeRef.current) {\n      strokeRef.current.style.filter = `url(#${filterId})`;\n    }\n\n    const width = Math.max(1, Math.round(host.clientWidth || host.getBoundingClientRect().width || 0));\n    const height = Math.max(1, Math.round(host.clientHeight || host.getBoundingClientRect().height || 0));\n\n    const dyAnims = Array.from(svg.querySelectorAll<SVGAnimateElement>('feOffset > animate[attributeName=\"dy\"]'));\n    if (dyAnims.length >= 2) {\n      dyAnims[0].setAttribute('values', `${height}; 0`);\n      dyAnims[1].setAttribute('values', `0; -${height}`);\n    }\n\n    const dxAnims = Array.from(svg.querySelectorAll<SVGAnimateElement>('feOffset > animate[attributeName=\"dx\"]'));\n    if (dxAnims.length >= 2) {\n      dxAnims[0].setAttribute('values', `${width}; 0`);\n      dxAnims[1].setAttribute('values', `0; -${width}`);\n    }\n\n    const baseDur = 6;\n    const dur = Math.max(0.001, baseDur / (speed || 1));\n    [...dyAnims, ...dxAnims].forEach(a => a.setAttribute('dur', `${dur}s`));\n\n    const disp = svg.querySelector('feDisplacementMap');\n    if (disp) disp.setAttribute('scale', String(30 * (chaos || 1)));\n\n    const filterEl = svg.querySelector<SVGFilterElement>(`#${CSS.escape(filterId)}`);\n    if (filterEl) {\n      filterEl.setAttribute('x', '-200%');\n      filterEl.setAttribute('y', '-200%');\n      filterEl.setAttribute('width', '500%');\n      filterEl.setAttribute('height', '500%');\n    }\n\n    requestAnimationFrame(() => {\n      [...dyAnims, ...dxAnims].forEach((a: any) => {\n        if (typeof a.beginElement === 'function') {\n          try {\n            a.beginElement();\n          } catch {}\n        }\n      });\n    });\n  };\n\n  useEffect(() => {\n    updateAnim();\n  }, [speed, chaos]);\n\n  useLayoutEffect(() => {\n    if (!rootRef.current) return;\n    const ro = new ResizeObserver(() => updateAnim());\n    ro.observe(rootRef.current);\n    updateAnim();\n    return () => ro.disconnect();\n  }, []);\n\n  const vars: CSSProperties = {\n    ['--electric-border-color' as any]: color,\n    ['--eb-border-width' as any]: `${thickness}px`\n  };\n\n  return (\n    <div ref={rootRef} className={`electric-border ${className ?? ''}`} style={{ ...vars, ...style }}>\n      <svg ref={svgRef} className=\"eb-svg\" aria-hidden focusable=\"false\">\n        <defs>\n          <filter id={filterId} colorInterpolationFilters=\"sRGB\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise1\" seed=\"1\" />\n            <feOffset in=\"noise1\" dx=\"0\" dy=\"0\" result=\"offsetNoise1\">\n              <animate attributeName=\"dy\" values=\"700; 0\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\n            </feOffset>\n\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise2\" seed=\"1\" />\n            <feOffset in=\"noise2\" dx=\"0\" dy=\"0\" result=\"offsetNoise2\">\n              <animate attributeName=\"dy\" values=\"0; -700\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\n            </feOffset>\n\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise1\" seed=\"2\" />\n            <feOffset in=\"noise1\" dx=\"0\" dy=\"0\" result=\"offsetNoise3\">\n              <animate attributeName=\"dx\" values=\"490; 0\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\n            </feOffset>\n\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise2\" seed=\"2\" />\n            <feOffset in=\"noise2\" dx=\"0\" dy=\"0\" result=\"offsetNoise4\">\n              <animate attributeName=\"dx\" values=\"0; -490\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\n            </feOffset>\n\n            <feComposite in=\"offsetNoise1\" in2=\"offsetNoise2\" result=\"part1\" />\n            <feComposite in=\"offsetNoise3\" in2=\"offsetNoise4\" result=\"part2\" />\n            <feBlend in=\"part1\" in2=\"part2\" mode=\"color-dodge\" result=\"combinedNoise\" />\n            <feDisplacementMap\n              in=\"SourceGraphic\"\n              in2=\"combinedNoise\"\n              scale=\"30\"\n              xChannelSelector=\"R\"\n              yChannelSelector=\"B\"\n            />\n          </filter>\n        </defs>\n      </svg>\n\n      <div className=\"eb-layers\">\n        <div ref={strokeRef} className=\"eb-stroke\" />\n        <div className=\"eb-glow-1\" />\n        <div className=\"eb-glow-2\" />\n        <div className=\"eb-background-glow\" />\n      </div>\n\n      <div className=\"eb-content\">{children}</div>\n    </div>\n  );\n};\n\nexport default ElectricBorder;\n",
      "type": "registry:component"
    },
    {
      "path": "public/ts/default/src/ts-default/Animations/ElectricBorder/ElectricBorder.css",
      "content": ".electric-border {\n  --electric-light-color: oklch(from var(--electric-border-color) l c h);\n  --eb-border-width: 2px;\n  position: relative;\n  border-radius: inherit;\n  overflow: visible;\n  isolation: isolate;\n}\n\n.eb-svg {\n  position: fixed;\n  left: -10000px;\n  top: -10000px;\n  width: 10px;\n  height: 10px;\n  opacity: 0.001;\n  pointer-events: none;\n}\n\n.eb-content {\n  position: relative;\n  border-radius: inherit;\n  z-index: 1;\n}\n\n.eb-layers {\n  position: absolute;\n  inset: 0;\n  border-radius: inherit;\n  pointer-events: none;\n  z-index: 2;\n}\n\n.eb-stroke,\n.eb-glow-1,\n.eb-glow-2,\n.eb-overlay-1,\n.eb-overlay-2,\n.eb-background-glow {\n  position: absolute;\n  inset: 0;\n  border-radius: inherit;\n  pointer-events: none;\n  box-sizing: border-box;\n}\n\n.eb-stroke {\n  border: var(--eb-border-width) solid var(--electric-border-color);\n}\n\n.eb-glow-1 {\n  border: var(--eb-border-width) solid oklch(from var(--electric-border-color) l c h / 0.6);\n  opacity: 0.5;\n  filter: blur(calc(0.5px + (var(--eb-border-width) * 0.25)));\n}\n\n.eb-glow-2 {\n  border: var(--eb-border-width) solid var(--electric-light-color);\n  opacity: 0.5;\n  filter: blur(calc(2px + (var(--eb-border-width) * 0.5)));\n}\n\n.eb-background-glow {\n  z-index: -1;\n  transform: scale(1.08);\n  filter: blur(32px);\n  opacity: 0.3;\n  background: linear-gradient(-30deg, var(--electric-light-color), transparent, var(--electric-border-color));\n}\n",
      "type": "registry:item"
    }
  ]
}